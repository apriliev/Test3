// Mock Data - in memory storage
const mockData = {
  managers: [
    { id: 1, name: "–ò–≤–∞–Ω", health_score: 89, status: "potential", emoji: "üë®‚Äçüíº" },
    { id: 2, name: "–ò—Ä–∏–Ω–∞", health_score: 65, status: "cold", emoji: "üë©‚Äçüíº" },
    { id: 3, name: "–ê—Ä—Ç–µ–º", health_score: 74, status: "potential", emoji: "üë®‚Äçüíº" },
    { id: 4, name: "–ú–∞—Ä–∏—è", health_score: 30, status: "optimism", emoji: "üë©‚Äçüíº" }
  ],
  
  deals: [
    {
      id: 1,
      title: "–°–¥–µ–ª–∫–∞ ‚Ññ1 - –û–û–û –¢–µ—Ö—Ü–µ–Ω—Ç—Ä",
      manager: "–ò–≤–∞–Ω",
      amount: 250000,
      stage: "negotiation",
      health_positive: [
        "–ú–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Å—Ç–∞—Ç—É—Å–µ –µ—â—ë 18 –¥–Ω–µ–π",
        "–£–∫–ª–∞–¥—ã–≤–∞–µ—Ç—Å—è –≤ —Ü–∏–∫–ª —Å–¥–µ–ª–∫–∏",
        "–ï—Å—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –≤ –∫–∞—Ä—Ç–æ—á–∫–µ"
      ],
      health_negative: [],
      last_call: "3 –¥–Ω—è –Ω–∞–∑–∞–¥",
      probability: 85
    },
    {
      id: 2,
      title: "–°–¥–µ–ª–∫–∞ ‚Ññ2 - –ó–ê–û –ü—Ä–æ–º—Ç–æ—Ä–≥",
      manager: "–ò—Ä–∏–Ω–∞",
      amount: 450000,
      stage: "presentation",
      health_positive: ["–£–∫–ª–∞–¥—ã–≤–∞–µ—Ç—Å—è –≤ —Ü–∏–∫–ª —Å–¥–µ–ª–∫–∏"],
      health_negative: [
        "–ó–∞–¥–∞—á–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ –Ω–∞ 2 –¥–Ω—è",
        "–ù–µ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ"
      ],
      last_call: "10 –¥–Ω–µ–π –Ω–∞–∑–∞–¥",
      probability: 45
    },
    {
      id: 3,
      title: "–°–¥–µ–ª–∫–∞ ‚Ññ3 - –ò–ü –°—Ç—Ä–æ–π—Å–µ—Ä–≤–∏—Å",
      manager: "–ê—Ä—Ç–µ–º",
      amount: 180000,
      stage: "tender",
      health_positive: ["–ï—Å—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –≤ –∫–∞—Ä—Ç–æ—á–∫–µ"],
      health_negative: ["–ó–∞–¥–∞—á–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ –Ω–∞ 5 –¥–Ω–µ–π"],
      last_call: "7 –¥–Ω–µ–π –Ω–∞–∑–∞–¥",
      probability: 60
    },
    {
      id: 4,
      title: "–°–¥–µ–ª–∫–∞ ‚Ññ4 - –û–û–û –ú–µ–≥–∞–ë–∏–∑–Ω–µ—Å",
      manager: "–ú–∞—Ä–∏—è",
      amount: 920000,
      stage: "lost",
      health_positive: [],
      health_negative: [
        "–ù–µ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ",
        "–ù–µ –∑–≤–æ–Ω–∏–ª–∏ 15 –¥–Ω–µ–π"
      ],
      last_call: "15 –¥–Ω–µ–π –Ω–∞–∑–∞–¥",
      probability: 15
    },
    {
      id: 5,
      title: "–°–¥–µ–ª–∫–∞ ‚Ññ5 - –û–û–û –ê–ª—å—Ñ–∞",
      manager: "–ò–≤–∞–Ω",
      amount: 350000,
      stage: "negotiation",
      health_positive: ["–ï—Å—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –≤ –∫–∞—Ä—Ç–æ—á–∫–µ", "–£–∫–ª–∞–¥—ã–≤–∞–µ—Ç—Å—è –≤ —Ü–∏–∫–ª —Å–¥–µ–ª–∫–∏"],
      health_negative: [],
      last_call: "1 –¥–µ–Ω—å –Ω–∞–∑–∞–¥",
      probability: 75
    }
  ],
  
  calls_data: [
    {
      id: 1,
      filename: "call_20241031_001.mp3",
      manager: "–ò–≤–∞–Ω",
      client: "–û–û–û –¢–µ—Ö—Ü–µ–Ω—Ç—Ä",
      duration: "12:45",
      date: "2025-10-31",
      transcription: "–ú–µ–Ω–µ–¥–∂–µ—Ä: –î–æ–±—Ä—ã–π –¥–µ–Ω—å! –≠—Ç–æ –∫–æ–º–ø–∞–Ω–∏—è –†–£–ë–ò –ß–ê–¢. –ö–∞–∫ –¥–µ–ª–∞? –ö–ª–∏–µ–Ω—Ç: –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —Å–ø–∞—Å–∏–±–æ, –≤—Å—ë —Ö–æ—Ä–æ—à–æ. –ú–µ–Ω–µ–¥–∂–µ—Ä: –Ø –∑–≤–æ–Ω—é –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –æ –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂–∞–º–∏. –ö–ª–∏–µ–Ω—Ç: –î–∞, –º–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ. –ú–µ–Ω–µ–¥–∂–µ—Ä: –ù–∞—à AI-—Å–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å –≤–∞—à–µ–π –≤–æ—Ä–æ–Ω–∫–∏ –ø—Ä–æ–¥–∞–∂, —ç–∫–æ–Ω–æ–º–∏—Ç 80% –≤—Ä–µ–º–µ–Ω–∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –Ω–∞ –∞–Ω–∞–ª–∏–∑ CRM.",
      quality_score: 18,
      scores: { politeness: 5, understanding: 5, solution: 4, closing: 4 },
      sentiment: "positive",
      key_phrases: ["–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å", "80% –≤—Ä–µ–º–µ–Ω–∏", "–≤–æ—Ä–æ–Ω–∫–∞ –ø—Ä–æ–¥–∞–∂"]
    },
    {
      id: 2,
      filename: "call_20241030_002.mp3",
      manager: "–ò—Ä–∏–Ω–∞",
      client: "–ó–ê–û –ü—Ä–æ–º—Ç–æ—Ä–≥",
      duration: "08:22",
      date: "2025-10-30",
      transcription: "–ú–µ–Ω–µ–¥–∂–µ—Ä: –ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –ò—Ä–∏–Ω–∞ –∏–∑ –†–£–ë–ò –ß–ê–¢. –ö–ª–∏–µ–Ω—Ç: –ü—Ä–∏–≤–µ—Ç. –ú–µ–Ω–µ–¥–∂–µ—Ä: –Ø –∑–≤–æ–Ω—é –ø–æ –ø–æ–≤–æ–¥—É –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏. –ö–ª–∏–µ–Ω—Ç: –•–æ—Ä–æ—à–æ, —Å–ª—É—à–∞—é. –ú–µ–Ω–µ–¥–∂–µ—Ä: –£ –Ω–∞—Å –µ—Å—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è –∞—É–¥–∏—Ç–∞ –≤–æ—Ä–æ–Ω–∫–∏. –ö–ª–∏–µ–Ω—Ç: –ú–æ–∂–µ—Ç, –Ω–∞–ø–∏—à–µ—à—å –º–Ω–µ –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é? –ú–µ–Ω–µ–¥–∂–µ—Ä: –ö–æ–Ω–µ—á–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—é –ö–ü —Å–µ–≥–æ–¥–Ω—è.",
      quality_score: 12,
      scores: { politeness: 4, understanding: 3, solution: 2, closing: 3 },
      sentiment: "neutral",
      key_phrases: ["–∞—É–¥–∏—Ç–∞ –≤–æ—Ä–æ–Ω–∫–∏", "–º–æ–¥—É–ª—å"]
    }
  ],
  
  kpi: {
    plan_month: 3560000,
    fact_current: 1860000,
    potential: 1250000,
    deficit: 450000,
    days_left: 12,
    deal_stats: {
      without_tasks: 38,
      overdue_tasks: 46,
      stuck_deals: 0,
      lost_deals: 29
    }
  },
  
  chatHistory: []
};

// State
let currentModule = 'dashboard';
let currentPeriod = 'month';
let currentManager = 'all';
let isLoggedIn = false;

// Utility Functions
function formatNumber(num) {
  return new Intl.NumberFormat('ru-RU').format(num);
}

function formatCurrency(num) {
  return formatNumber(num) + ' ‚ÇΩ';
}

function getHealthClass(score) {
  if (score >= 75) return 'high';
  if (score >= 50) return 'medium';
  return 'low';
}

function getStageLabel(stage) {
  const stages = {
    negotiation: '–ü–µ—Ä–µ–≥–æ–≤–æ—Ä—ã',
    presentation: '–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è',
    tender: '–¢–µ–Ω–¥–µ—Ä',
    lost: '–ü—Ä–æ–∏–≥—Ä–∞–Ω–∞'
  };
  return stages[stage] || stage;
}

// Login
function handleLogin(e) {
  e.preventDefault();
  const username = document.getElementById('loginUsername').value;
  const password = document.getElementById('loginPassword').value;
  
  if (username === 'admin' && password === 'admin') {
    isLoggedIn = true;
    document.getElementById('loginScreen').style.display = 'none';
    document.getElementById('mainApp').style.display = 'flex';
    initializeApp();
  } else {
    alert('–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
  }
}

function handleLogout() {
  isLoggedIn = false;
  document.getElementById('loginScreen').style.display = 'flex';
  document.getElementById('mainApp').style.display = 'none';
  document.getElementById('loginUsername').value = '';
  document.getElementById('loginPassword').value = '';
}

// Module Navigation
function switchModule(moduleName) {
  currentModule = moduleName;
  
  // Update nav items
  document.querySelectorAll('.nav-item').forEach(item => {
    item.classList.remove('active');
    if (item.dataset.module === moduleName) {
      item.classList.add('active');
    }
  });
  
  // Update modules
  document.querySelectorAll('.module').forEach(module => {
    module.classList.remove('active');
  });
  document.getElementById(`${moduleName}Module`).classList.add('active');
  
  // Load module data
  loadModuleData(moduleName);
}

function loadModuleData(moduleName) {
  switch(moduleName) {
    case 'dashboard':
      renderDashboard();
      break;
    case 'audit':
      renderAuditTable();
      break;
    case 'calls':
      renderCallsHistory();
      break;
    case 'pulse':
      renderPulseGrid();
      break;
    case 'assistant':
      // Chat is already initialized
      break;
  }
}

// Dashboard Module
function renderDashboard() {
  const kpi = mockData.kpi;
  
  // Update KPI cards
  document.getElementById('kpiPlan').textContent = formatCurrency(kpi.plan_month);
  document.getElementById('kpiFact').textContent = formatCurrency(kpi.fact_current);
  document.getElementById('kpiPotential').textContent = formatCurrency(kpi.potential);
  document.getElementById('kpiDeficit').textContent = formatCurrency(kpi.deficit);
  
  // Update progress
  const progress = Math.round((kpi.fact_current / kpi.plan_month) * 100);
  document.getElementById('planProgress').style.width = progress + '%';
  
  // Update stats
  document.getElementById('statWithoutTasks').textContent = kpi.deal_stats.without_tasks;
  document.getElementById('statOverdue').textContent = kpi.deal_stats.overdue_tasks;
  document.getElementById('statLost').textContent = kpi.deal_stats.lost_deals;
  document.getElementById('statStuck').textContent = kpi.deal_stats.stuck_deals;
  
  // Render managers
  renderManagers();
}

function renderManagers() {
  const grid = document.getElementById('managersGrid');
  grid.innerHTML = '';
  
  mockData.managers.forEach(manager => {
    const healthClass = getHealthClass(manager.health_score);
    const card = document.createElement('div');
    card.className = 'manager-card';
    card.innerHTML = `
      <div class="manager-header">
        <div class="manager-avatar">${manager.emoji}</div>
        <div class="manager-info">
          <h4>–ú–µ–Ω–µ–¥–∂–µ—Ä ${manager.name}</h4>
          <p class="text-secondary">–û—Ç–¥–µ–ª –ø—Ä–æ–¥–∞–∂</p>
        </div>
      </div>
      <div class="manager-health">
        <div class="health-score ${healthClass}">${manager.health_score}</div>
        <div class="health-label">–ó–¥–æ—Ä–æ–≤—å–µ —Å–¥–µ–ª–æ–∫</div>
      </div>
    `;
    grid.appendChild(card);
  });
}

// Audit Module
function renderAuditTable() {
  const tbody = document.getElementById('dealsTableBody');
  tbody.innerHTML = '';
  
  let deals = mockData.deals;
  if (currentManager !== 'all') {
    const manager = mockData.managers.find(m => m.id === parseInt(currentManager));
    if (manager) {
      deals = deals.filter(d => d.manager === manager.name);
    }
  }
  
  deals.forEach(deal => {
    const tr = document.createElement('tr');
    tr.innerHTML = `
      <td><div class="deal-title">${deal.title}</div></td>
      <td>${deal.manager}</td>
      <td class="deal-amount">${formatCurrency(deal.amount)}</td>
      <td><span class="stage-badge ${deal.stage}">${getStageLabel(deal.stage)}</span></td>
      <td>
        <div class="probability-bar">
          <div class="probability-fill" style="width: ${deal.probability}%"></div>
        </div>
        <span style="margin-left: 8px; font-size: 12px;">${deal.probability}%</span>
      </td>
      <td>
        <div class="health-indicators">
          ${deal.health_positive.map(h => `<div class="health-indicator positive">‚úì ${h}</div>`).join('')}
          ${deal.health_negative.map(h => `<div class="health-indicator negative">‚úó ${h}</div>`).join('')}
        </div>
      </td>
      <td>${deal.last_call}</td>
    `;
    tbody.appendChild(tr);
  });
}

// Calls Module
function renderCallsHistory() {
  const container = document.getElementById('callsHistory');
  container.innerHTML = '';
  
  mockData.calls_data.forEach(call => {
    const item = document.createElement('div');
    item.className = 'call-history-item';
    item.innerHTML = `
      <div class="call-history-header">
        <div class="call-history-title">üìû ${call.filename}</div>
        <div class="call-history-score">${call.quality_score}/20</div>
      </div>
      <div class="call-history-details">
        <span><strong>–ú–µ–Ω–µ–¥–∂–µ—Ä:</strong> ${call.manager}</span>
        <span><strong>–ö–ª–∏–µ–Ω—Ç:</strong> ${call.client}</span>
        <span><strong>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</strong> ${call.duration}</span>
        <span><strong>–î–∞—Ç–∞:</strong> ${call.date}</span>
      </div>
    `;
    item.addEventListener('click', () => displayCallAnalysis(call));
    container.appendChild(item);
  });
}

function setupCallUpload() {
  const uploadArea = document.getElementById('uploadArea');
  const fileInput = document.getElementById('audioFileInput');
  const selectBtn = document.getElementById('selectFileBtn');
  
  selectBtn.addEventListener('click', (e) => {
    e.stopPropagation();
    fileInput.click();
  });
  
  uploadArea.addEventListener('click', () => {
    fileInput.click();
  });
  
  fileInput.addEventListener('change', (e) => {
    if (e.target.files.length > 0) {
      simulateTranscription(e.target.files[0]);
    }
  });
}

function simulateTranscription(file) {
  const progressDiv = document.getElementById('transcriptionProgress');
  const progressBar = document.getElementById('transcriptionProgressBar');
  const statusText = document.getElementById('transcriptionStatus');
  
  progressDiv.style.display = 'block';
  document.getElementById('callAnalysisResults').style.display = 'none';
  
  const steps = [
    { progress: 20, text: '–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞...' },
    { progress: 40, text: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ...' },
    { progress: 60, text: '–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏...' },
    { progress: 80, text: '–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∑–≤–æ–Ω–∫–∞...' },
    { progress: 100, text: '–ì–æ—Ç–æ–≤–æ!' }
  ];
  
  let currentStep = 0;
  
  const interval = setInterval(() => {
    if (currentStep < steps.length) {
      progressBar.style.width = steps[currentStep].progress + '%';
      statusText.textContent = steps[currentStep].text;
      currentStep++;
    } else {
      clearInterval(interval);
      setTimeout(() => {
        progressDiv.style.display = 'none';
        // Use first call as example
        displayCallAnalysis(mockData.calls_data[0]);
      }, 500);
    }
  }, 800);
}

function displayCallAnalysis(call) {
  document.getElementById('callAnalysisResults').style.display = 'block';
  
  // Call info
  document.getElementById('callManager').textContent = call.manager;
  document.getElementById('callClient').textContent = call.client;
  document.getElementById('callDuration').textContent = call.duration;
  document.getElementById('callDate').textContent = call.date;
  
  // Quality score
  document.getElementById('qualityScoreValue').textContent = call.quality_score;
  const scoreLabel = call.quality_score >= 16 ? '–û—Ç–ª–∏—á–Ω–æ' : call.quality_score >= 12 ? '–•–æ—Ä–æ—à–æ' : '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ';
  document.getElementById('qualityScoreLabel').textContent = scoreLabel;
  document.getElementById('qualityScoreLabel').style.color = call.quality_score >= 16 ? 'var(--color-success)' : call.quality_score >= 12 ? 'var(--color-warning)' : 'var(--color-error)';
  
  // Metrics
  document.getElementById('metricPoliteness').style.width = (call.scores.politeness / 5 * 100) + '%';
  document.getElementById('metricPolitenessValue').textContent = call.scores.politeness + '/5';
  
  document.getElementById('metricUnderstanding').style.width = (call.scores.understanding / 5 * 100) + '%';
  document.getElementById('metricUnderstandingValue').textContent = call.scores.understanding + '/5';
  
  document.getElementById('metricSolution').style.width = (call.scores.solution / 5 * 100) + '%';
  document.getElementById('metricSolutionValue').textContent = call.scores.solution + '/5';
  
  document.getElementById('metricClosing').style.width = (call.scores.closing / 5 * 100) + '%';
  document.getElementById('metricClosingValue').textContent = call.scores.closing + '/5';
  
  // Transcription
  const transcriptionBox = document.getElementById('transcriptionText');
  const lines = call.transcription.split('. ');
  transcriptionBox.innerHTML = lines.map(line => {
    if (line.includes('–ú–µ–Ω–µ–¥–∂–µ—Ä:')) {
      return `<div class="transcription-line"><span class="speaker-label agent">–ú–µ–Ω–µ–¥–∂–µ—Ä:</span> ${line.replace('–ú–µ–Ω–µ–¥–∂–µ—Ä:', '')}</div>`;
    } else if (line.includes('–ö–ª–∏–µ–Ω—Ç:')) {
      return `<div class="transcription-line"><span class="speaker-label client">–ö–ª–∏–µ–Ω—Ç:</span> ${line.replace('–ö–ª–∏–µ–Ω—Ç:', '')}</div>`;
    }
    return `<div class="transcription-line">${line}</div>`;
  }).join('');
  
  // Sentiment
  const sentimentBadge = document.getElementById('sentimentBadge');
  const sentimentLabels = { positive: '–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π', neutral: '–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π', negative: '–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π' };
  sentimentBadge.textContent = sentimentLabels[call.sentiment];
  sentimentBadge.className = 'sentiment-badge ' + call.sentiment;
  
  // Key phrases
  const keyPhrases = document.getElementById('keyPhrases');
  keyPhrases.innerHTML = call.key_phrases.map(phrase => 
    `<span class="key-phrase">${phrase}</span>`
  ).join('');
  
  // Recommendations
  const recommendations = document.getElementById('recommendations');
  const recs = generateRecommendations(call);
  recommendations.innerHTML = recs.map(rec => `
    <div class="recommendation-item">
      <div class="recommendation-icon">${rec.icon}</div>
      <div class="recommendation-text">${rec.text}</div>
    </div>
  `).join('');
  
  // Scroll to results
  document.getElementById('callAnalysisResults').scrollIntoView({ behavior: 'smooth', block: 'start' });
}

function generateRecommendations(call) {
  const recs = [];
  
  if (call.scores.politeness < 5) {
    recs.push({ icon: 'üí¨', text: '–£–ª—É—á—à–∏—Ç–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª–µ–µ –≤–µ–∂–ª–∏–≤—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ –≤ –Ω–∞—á–∞–ª–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞.' });
  }
  
  if (call.scores.understanding < 4) {
    recs.push({ icon: 'üéØ', text: '–ó–∞–¥–∞–≤–∞–π—Ç–µ –±–æ–ª—å—à–µ —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π –∫–ª–∏–µ–Ω—Ç–∞.' });
  }
  
  if (call.scores.solution < 4) {
    recs.push({ icon: 'üí°', text: '–ü—Ä–µ–¥–ª–∞–≥–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –ø—Ä–æ–±–ª–µ–º–∞–º –∫–ª–∏–µ–Ω—Ç–∞.' });
  }
  
  if (call.scores.closing < 4) {
    recs.push({ icon: '‚úÖ', text: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–∑–Ω–∞—á–∞–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞.' });
  }
  
  if (call.sentiment === 'negative') {
    recs.push({ icon: 'üòä', text: '–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ - –∫–ª–∏–µ–Ω—Ç –±—ã–ª –Ω–µ–¥–æ–≤–æ–ª–µ–Ω.' });
  }
  
  if (recs.length === 0) {
    recs.push({ icon: 'üåü', text: '–û—Ç–ª–∏—á–Ω—ã–π –∑–≤–æ–Ω–æ–∫! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ.' });
  }
  
  return recs;
}

// Pulse Module
function renderPulseGrid() {
  const grid = document.getElementById('pulseGrid');
  grid.innerHTML = '';
  
  let deals = mockData.deals;
  if (currentManager !== 'all') {
    const manager = mockData.managers.find(m => m.id === parseInt(currentManager));
    if (manager) {
      deals = deals.filter(d => d.manager === manager.name);
    }
  }
  
  deals.forEach(deal => {
    const healthClass = getHealthClass(deal.probability);
    const card = document.createElement('div');
    card.className = 'pulse-card ' + healthClass;
    
    const recommendations = [];
    if (deal.health_negative.length > 0) {
      recommendations.push('–°—Ä–æ—á–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º');
      recommendations.push('–û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ CRM');
    }
    if (deal.probability < 50) {
      recommendations.push('–ü—Ä–æ–≤–µ—Å—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é');
    }
    if (recommendations.length === 0) {
      recommendations.push('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø–æ –ø–ª–∞–Ω—É');
    }
    
    card.innerHTML = `
      <div class="pulse-header">
        <div class="pulse-info">
          <h4>${deal.title}</h4>
          <p class="text-secondary">${deal.manager}</p>
        </div>
        <div class="pulse-score ${healthClass}">${deal.probability}</div>
      </div>
      <div class="pulse-details">
        <div class="pulse-detail">
          <span class="text-secondary">–°—É–º–º–∞</span>
          <span class="deal-amount">${formatCurrency(deal.amount)}</span>
        </div>
        <div class="pulse-detail">
          <span class="text-secondary">–≠—Ç–∞–ø</span>
          <span>${getStageLabel(deal.stage)}</span>
        </div>
        <div class="pulse-detail">
          <span class="text-secondary">–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å</span>
          <span>${deal.probability}%</span>
        </div>
        <div class="pulse-detail">
          <span class="text-secondary">–ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–Ω—Ç–∞–∫—Ç</span>
          <span>${deal.last_call}</span>
        </div>
      </div>
      <div class="pulse-recommendations">
        <strong>–ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π:</strong>
        <ul>
          ${recommendations.map(rec => `<li>${rec}</li>`).join('')}
        </ul>
      </div>
    `;
    grid.appendChild(card);
  });
}

// Assistant Module
function setupAssistant() {
  const chatInput = document.getElementById('chatInput');
  const sendBtn = document.getElementById('chatSendBtn');
  const quickActionBtns = document.querySelectorAll('.chat-quick-actions button');
  
  sendBtn.addEventListener('click', () => {
    const message = chatInput.value.trim();
    if (message) {
      sendChatMessage(message);
      chatInput.value = '';
    }
  });
  
  chatInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendBtn.click();
    }
  });
  
  quickActionBtns.forEach(btn => {
    btn.addEventListener('click', () => {
      const action = btn.dataset.action;
      sendChatMessage(action);
    });
  });
}

function sendChatMessage(message) {
  const messagesContainer = document.getElementById('chatMessages');
  
  // Add user message
  const userMsg = document.createElement('div');
  userMsg.className = 'chat-message chat-message--user';
  userMsg.innerHTML = `
    <div class="chat-message-avatar">üë§</div>
    <div class="chat-message-content">
      <p>${message}</p>
      <div class="chat-message-time">–°–µ–π—á–∞—Å</div>
    </div>
  `;
  messagesContainer.appendChild(userMsg);
  
  // Simulate AI response
  setTimeout(() => {
    const response = generateAIResponse(message);
    const aiMsg = document.createElement('div');
    aiMsg.className = 'chat-message chat-message--assistant';
    aiMsg.innerHTML = `
      <div class="chat-message-avatar">ü§ñ</div>
      <div class="chat-message-content">
        <p>${response}</p>
        <div class="chat-message-time">–°–µ–π—á–∞—Å</div>
      </div>
    `;
    messagesContainer.appendChild(aiMsg);
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
  }, 1000);
  
  messagesContainer.scrollTop = messagesContainer.scrollHeight;
}

function generateAIResponse(message) {
  const lowerMessage = message.toLowerCase();
  
  if (lowerMessage.includes('–∞–Ω–∞–ª–∏–∑') || lowerMessage.includes('—Å–¥–µ–ª–∫')) {
    return `üìä <strong>–ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 —Å–¥–µ–ª–æ–∫:</strong><br><br>
    ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: 60%<br>
    ‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: ${formatCurrency(mockData.deals.slice(0, 5).reduce((sum, d) => sum + d.amount, 0))}<br>
    ‚Ä¢ 2 —Å–¥–µ–ª–∫–∏ —Ç—Ä–µ–±—É—é—Ç —Å—Ä–æ—á–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è<br>
    ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É—é —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –ø–æ —Å–¥–µ–ª–∫–∞–º ‚Ññ2 –∏ ‚Ññ4`;
  }
  
  if (lowerMessage.includes('–∫–ø') || lowerMessage.includes('–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏')) {
    return `üìÑ <strong>–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ:</strong><br><br>
    –£–≤–∞–∂–∞–µ–º—ã–π –∫–ª–∏–µ–Ω—Ç!<br><br>
    –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ–º –≤–∞—à–µ–º—É –≤–Ω–∏–º–∞–Ω–∏—é RUBI Chat Pro - –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª–æ–º –ø—Ä–æ–¥–∞–∂ —Å AI-–∞–Ω–∞–ª–∏–∑–æ–º –∑–≤–æ–Ω–∫–æ–≤.<br><br>
    <strong>–ö–ª—é—á–µ–≤—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong><br>
    ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª—è –≤–æ—Ä–æ–Ω–∫–∏ –ø—Ä–æ–¥–∞–∂<br>
    ‚Ä¢ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∏ –∞–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∑–≤–æ–Ω–∫–æ–≤<br>
    ‚Ä¢ AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å–¥–µ–ª–∫–∏<br>
    ‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—è 80% –≤—Ä–µ–º–µ–Ω–∏ –†–û–ü–∞<br><br>
    –°—Ç–æ–∏–º–æ—Å—Ç—å: –æ—Ç 49 000 ‚ÇΩ/–º–µ—Å`;
  }
  
  if (lowerMessage.includes('—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏') || lowerMessage.includes('—Ö–æ–ª–æ–¥–Ω')) {
    return `üí° <strong>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ö–æ–ª–æ–¥–Ω—ã–º –ª–∏–¥–∞–º:</strong><br><br>
    1. –°–¥–µ–ª–∫–∞ ‚Ññ4 (–û–û–û –ú–µ–≥–∞–ë–∏–∑–Ω–µ—Å) - –Ω–µ –±—ã–ª–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞ 15 –¥–Ω–µ–π. –°—Ä–æ—á–Ω–æ –ø–æ–∑–≤–æ–Ω–∏—Ç—å!<br>
    2. –°–¥–µ–ª–∫–∞ ‚Ññ2 (–ó–ê–û –ü—Ä–æ–º—Ç–æ—Ä–≥) - –Ω–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å. –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É.<br>
    3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–æ–¥—É–ª—å "–û—Ü–µ–Ω–∫–∞ –∑–≤–æ–Ω–∫–æ–≤" –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤<br>
    4. –û–±–Ω–æ–≤–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ CRM –ø–æ –≤—Å–µ–º —Ö–æ–ª–æ–¥–Ω—ã–º —Å–¥–µ–ª–∫–∞–º`;
  }
  
  if (lowerMessage.includes('–ø–∏—Å—å–º–æ') || lowerMessage.includes('email')) {
    return `‚úâÔ∏è <strong>–®–∞–±–ª–æ–Ω –ø–∏—Å—å–º–∞ –∫–ª–∏–µ–Ω—Ç—É:</strong><br><br>
    –¢–µ–º–∞: –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–∂<br><br>
    –î–æ–±—Ä—ã–π –¥–µ–Ω—å, [–ò–º—è]!<br><br>
    –ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ —É–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤ –Ω–∞—à–µ–º –Ω–µ–¥–∞–≤–Ω–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä–µ. –ö–∞–∫ –∏ –æ–±–µ—â–∞–ª, –Ω–∞–ø—Ä–∞–≤–ª—è—é –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ RUBI Chat Pro.<br><br>
    –ù–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º:<br>
    ‚Ä¢ –£–≤–µ–ª–∏—á–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –Ω–∞ 25-40%<br>
    ‚Ä¢ –°–æ–∫—Ä–∞—Ç–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ —Ä—É—Ç–∏–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤ 5 —Ä–∞–∑<br>
    ‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –æ—Ç–¥–µ–ª–∞<br><br>
    –ì–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã.<br><br>
    –° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>
    [–í–∞—à–µ –∏–º—è]`;
  }
  
  return `–ü–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å. –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å:<br>
  ‚Ä¢ –ê–Ω–∞–ª–∏–∑–æ–º —Å–¥–µ–ª–æ–∫ –∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π<br>
  ‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –ö–ü –∏ –ø–∏—Å–µ–º<br>
  ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏<br>
  ‚Ä¢ –û—Ü–µ–Ω–∫–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤<br><br>
  –ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –±—ã—Å—Ç—Ä—ã—Ö –∫–æ–º–∞–Ω–¥ –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å.`;
}

// Filters
function setupFilters() {
  document.getElementById('periodFilter').addEventListener('change', (e) => {
    currentPeriod = e.target.value;
    loadModuleData(currentModule);
  });
  
  document.getElementById('managerFilter').addEventListener('change', (e) => {
    currentManager = e.target.value;
    loadModuleData(currentModule);
  });
  
  document.getElementById('updateDataBtn').addEventListener('click', () => {
    loadModuleData(currentModule);
    alert('–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!');
  });
}

// Initialize App
function initializeApp() {
  // Setup navigation
  document.querySelectorAll('.nav-item').forEach(item => {
    item.addEventListener('click', () => {
      switchModule(item.dataset.module);
    });
  });
  
  // Setup filters
  setupFilters();
  
  // Setup modules
  setupCallUpload();
  setupAssistant();
  
  // Load initial module
  loadModuleData('dashboard');
}

// Event Listeners
document.addEventListener('DOMContentLoaded', () => {
  // Login form
  document.getElementById('loginForm').addEventListener('submit', handleLogin);
  document.getElementById('logoutBtn').addEventListener('click', handleLogout);
});