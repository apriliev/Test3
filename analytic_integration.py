# -*- coding: utf-8 -*-
"""
–ë–£–†–ú–ê–® ¬∑ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
–≠—Ç–æ—Ç —Ñ–∞–π–ª –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å analytic_engine.py –∫ burmash_analytics_v7.py
"""

# ====================================
# –ü–†–ò–ú–ï–† –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –í STREAMLIT
# ====================================

import streamlit as st
import pandas as pd
from analytic_engine import AnalyticEngine


def render_analytics_tab():
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –ø–æ–ª–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    –í—Å—Ç–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–µ
    """
    
    st.header("üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å AnalyticEngine")
    
    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ df_all –∏ users_map —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    # (–æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ st.session_state –∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö —Ñ—É–Ω–∫—Ü–∏–∏)
    
    if 'df_all' not in st.session_state or 'users_map' not in st.session_state:
        st.error("–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–¥–µ–ª–∫–∏.")
        return
    
    df_all = st.session_state['df_all']
    users_map = st.session_state['users_map']
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –¥–≤–∏–∂–æ–∫
    engine = AnalyticEngine(df_all, users_map)
    
    # ========== –†–ê–ó–î–ï–õ 1: –ê–ù–ê–õ–ò–ó –¢–†–ï–ù–î–ê ==========
    st.subheader("üìâ –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏")
    col1, col2, col3, col4 = st.columns(4)
    
    trend_data = engine.conversion_trend_analysis()
    
    with col1:
        st.metric(
            "üìä –¢—Ä–µ–Ω–¥",
            trend_data["trend"],
            f"{trend_data['change_pct']:.1f}%"
        )
    with col2:
        st.metric(
            "–ü–µ—Ä–≤—ã–π –º–µ—Å—è—Ü",
            f"{trend_data['first_month_conv']:.2f}%"
        )
    with col3:
        st.metric(
            "–ü–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü",
            f"{trend_data['last_month_conv']:.2f}%"
        )
    with col4:
        st.metric(
            "–ò–∑–º–µ–Ω–µ–Ω–∏–µ (–ø.–ø.)",
            f"{trend_data['absolute_change']:.2f}%"
        )
    
    # ========== –†–ê–ó–î–ï–õ 2: –ê–ù–ê–õ–ò–ó –ü–û –ü–ï–†–ò–û–î–ê–ú ==========
    st.subheader("üìÖ –ö–æ–Ω–≤–µ—Ä—Å–∏—è –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º")
    
    tab_year, tab_quarter, tab_month = st.tabs(["–ü–æ –≥–æ–¥–∞–º", "–ü–æ –∫–≤–∞—Ä—Ç–∞–ª–∞–º", "–ü–æ –º–µ—Å—è—Ü–∞–º"])
    
    with tab_year:
        yearly = engine.conversion_by_year()
        if yearly:
            df_yearly = pd.DataFrame([
                {
                    "–ì–æ–¥": year,
                    "–°–¥–µ–ª–æ–∫": data["total_deals"],
                    "–í—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö": data["won_deals"],
                    "–ö–æ–Ω–≤–µ—Ä—Å–∏—è %": f"{data['conversion_pct']:.2f}%",
                    "–í—ã—Ä—É—á–∫–∞": f"{data['revenue']/1e6:.1f}–ú",
                    "–°—Ä–µ–¥–Ω–∏–π —á–µ–∫": f"{data['avg_check']/1e3:.0f}–ö"
                }
                for year, data in yearly.items()
            ])
            st.dataframe(df_yearly, use_container_width=True)
        else:
            st.info("–î–∞–Ω–Ω—ã–µ –ø–æ –≥–æ–¥–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    with tab_quarter:
        quarterly = engine.conversion_by_quarter()
        if quarterly:
            df_quarterly = pd.DataFrame([
                {
                    "–ü–µ—Ä–∏–æ–¥": period,
                    "–°–¥–µ–ª–æ–∫": data["total_deals"],
                    "–í—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö": data["won_deals"],
                    "–ö–æ–Ω–≤–µ—Ä—Å–∏—è %": f"{data['conversion_pct']:.2f}%",
                    "–í—ã—Ä—É—á–∫–∞": f"{data['revenue']/1e6:.1f}–ú",
                    "–°—Ä–µ–¥–Ω–∏–π —á–µ–∫": f"{data['avg_check']/1e3:.0f}–ö"
                }
                for period, data in quarterly.items()
            ])
            st.dataframe(df_quarterly, use_container_width=True)
        else:
            st.info("–î–∞–Ω–Ω—ã–µ –ø–æ –∫–≤–∞—Ä—Ç–∞–ª–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    with tab_month:
        monthly = engine.conversion_by_month()
        if monthly:
            df_monthly = pd.DataFrame([
                {
                    "–ú–µ—Å—è—Ü": month,
                    "–°–¥–µ–ª–æ–∫": data["total_deals"],
                    "–í—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö": data["won_deals"],
                    "–ö–æ–Ω–≤–µ—Ä—Å–∏—è %": f"{data['conversion_pct']:.2f}%",
                    "–í—ã—Ä—É—á–∫–∞": f"{data['revenue']/1e6:.1f}–ú",
                    "–°—Ä–µ–¥–Ω–∏–π —á–µ–∫": f"{data['avg_check']/1e3:.0f}–ö"
                }
                for month, data in monthly.items()
            ])
            st.dataframe(df_monthly, use_container_width=True)
        else:
            st.info("–î–∞–Ω–Ω—ã–µ –ø–æ –º–µ—Å—è—Ü–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    # ========== –†–ê–ó–î–ï–õ 3: –†–ï–ô–¢–ò–ù–ì –ú–ï–ù–ï–î–ñ–ï–†–û–í ==========
    st.subheader("üë• –†–µ–π—Ç–∏–Ω–≥ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø–æ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏")
    
    ranking = engine.manager_ranking()
    
    if ranking:
        # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
        df_ranking = pd.DataFrame(ranking)
        
        # –ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        st.dataframe(
            df_ranking[[
                "rank", "manager", "conversion", "status", "deals", "won", "revenue"
            ]].rename(columns={
                "rank": "üèÜ –ú–µ—Å—Ç–æ",
                "manager": "üë§ –ú–µ–Ω–µ–¥–∂–µ—Ä",
                "conversion": "üìà –ö–æ–Ω–≤–µ—Ä—Å–∏—è %",
                "status": "üìä –°—Ç–∞—Ç—É—Å",
                "deals": "üìã –°–¥–µ–ª–æ–∫",
                "won": "‚úÖ –í—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö",
                "revenue": "üí∞ –í—ã—Ä—É—á–∫–∞"
            }),
            use_container_width=True
        )
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        import plotly.express as px
        fig = px.bar(
            df_ranking,
            x="manager",
            y="conversion",
            title="–ö–æ–Ω–≤–µ—Ä—Å–∏—è –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º",
            labels={"manager": "–ú–µ–Ω–µ–¥–∂–µ—Ä", "conversion": "–ö–æ–Ω–≤–µ—Ä—Å–∏—è %"}
        )
        st.plotly_chart(fig, use_container_width=True)
    else:
        st.info("–î–∞–Ω–Ω—ã–µ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    # ========== –†–ê–ó–î–ï–õ 4: –û–ë–ù–ê–†–£–ñ–ï–ù–ò–ï –ö–†–ò–ó–ò–°–û–í ==========
    st.subheader("üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º")
    
    alerts = engine.crisis_detection()
    
    if alerts:
        for alert in alerts:
            level = alert["level"]
            issue = alert["issue"]
            
            if "–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø" in level:
                st.error(f"**{level}** {issue}")
            elif "–ö–†–ò–ó–ò–°" in level or "–í–ù–ò–ú–ê–ù–ò–ï" in level:
                st.warning(f"**{level}** {issue}")
            else:
                st.info(f"**{level}** {issue}")
    else:
        st.success("üü¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
    
    # ========== –†–ê–ó–î–ï–õ 5: –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –†–ê–ó–ú–ï–†–£ –ß–ï–ö–ê ==========
    st.subheader("üíµ –ê–Ω–∞–ª–∏–∑ –ø–æ —Ä–∞–∑–º–µ—Ä—É —á–µ–∫–∞")
    
    opp_dist = engine.opportunity_distribution()
    
    if opp_dist:
        df_opp = pd.DataFrame([
            {
                "–°–µ–≥–º–µ–Ω—Ç": seg,
                "–°–¥–µ–ª–æ–∫": data["deals"],
                "–í—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö": data["won"],
                "–ö–æ–Ω–≤–µ—Ä—Å–∏—è %": f"{data['conversion']:.2f}%",
                "–°—Ä–µ–¥–Ω–∏–π —á–µ–∫": f"{data['avg_check']/1e3:.0f}–ö",
                "–í—ã—Ä—É—á–∫–∞": f"{data['revenue']/1e6:.1f}–ú"
            }
            for seg, data in opp_dist.items()
        ])
        
        st.dataframe(df_opp, use_container_width=True)
        
        # –ì—Ä–∞—Ñ–∏–∫
        import plotly.express as px
        fig = px.bar(
            df_opp,
            x="–°–µ–≥–º–µ–Ω—Ç",
            y="–ö–æ–Ω–≤–µ—Ä—Å–∏—è %",
            title="–ö–æ–Ω–≤–µ—Ä—Å–∏—è –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º (—Ä–∞–∑–º–µ—Ä —á–µ–∫–∞)"
        )
        st.plotly_chart(fig, use_container_width=True)
    else:
        st.info("–î–∞–Ω–Ω—ã–µ –æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    # ========== –†–ê–ó–î–ï–õ 6: –ó–ê–í–ò–°–®–ò–ï –°–î–ï–õ–ö–ò ==========
    st.subheader("‚è∏Ô∏è –ó–∞–≤–∏—Å—à–∏–µ —Å–¥–µ–ª–∫–∏ (7+ –¥–Ω–µ–π –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)")
    
    stalled = engine.stalled_deals(stuck_days=7)
    
    if stalled:
        df_stalled = pd.DataFrame(stalled)
        st.dataframe(df_stalled, use_container_width=True)
        st.metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–∏—Å—à–∏—Ö", len(stalled))
    else:
        st.success("‚úÖ –ù–µ—Ç –∑–∞–≤–∏—Å—à–∏—Ö —Å–¥–µ–ª–æ–∫")


# ====================================
# –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –í –û–°–ù–û–í–ù–û–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–ï
# ====================================

"""
–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç—É –∞–Ω–∞–ª–∏—Ç–∏–∫—É –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ burmash_analytics_v7.py:

1. –í –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∏–º–ø–æ—Ä—Ç:
   from analytic_engine import AnalyticEngine

2. –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏—Ö –≤ session_state:
   st.session_state['df_all'] = df_all
   st.session_state['users_map'] = users_map

3. –í –≤–∫–ª–∞–¥–∫–µ "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞" –≤—ã–∑–æ–≤–∏—Ç–µ:
   render_analytics_tab()

–ü—Ä–∏–º–µ—Ä:
```python
import streamlit as st
from analytic_engine import AnalyticEngine

# ... –¥—Ä—É–≥–æ–π –∫–æ–¥ ...

# –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
st.session_state['df_all'] = df_all
st.session_state['users_map'] = users_map

# –í–∫–ª–∞–¥–∫–∏
tab_dashboard, tab_analytics, tab_managers, tab_history = st.tabs([...])

with tab_analytics:
    render_analytics_tab()
```
"""


# ====================================
# STANDALONE –°–ö–†–ò–ü–¢ –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
# ====================================

if __name__ == "__main__":
    # –≠—Ç–æ—Ç –∫–æ–¥ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –µ—Å–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é
    print("–≠—Ç–æ—Ç —Ñ–∞–π–ª –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
    print("\n–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
    print("  1. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ: from analytic_integration import AnalyticEngine")
    print("  2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: engine = AnalyticEngine(df_deals, users_map)")
    print("  3. –í—ã–∑–æ–≤–∏—Ç–µ: render_analytics_tab()")
