# -*- coding: utf-8 -*-
"""
–ë–£–†–ú–ê–® ¬∑ CRM –î—ç—à–±–æ—Ä–¥ (v7.0) ‚Äî –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥–∞–∂
- –ù–æ–≤–∞—è –≤–∫–ª–∞–¥–∫–∞ "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞" —Å –∫–ª—é—á–µ–≤—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
- –†–∞—Å—á—ë—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º, –ø–µ—Ä–∏–æ–¥–∞–º, —Å—Ä–µ–¥–Ω–∏—Ö —á–µ–∫–æ–≤
- –¢—Ä–µ–Ω–¥—ã –ø–∞–¥–µ–Ω–∏—è/—Ä–æ—Å—Ç–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ 
- ROI –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–æ–∫
- –ê–Ω–∞–ª–∏–∑ –æ—Ç–º–µ–Ω –∫–ª–∏–µ–Ω—Ç–æ–≤
"""

import os, json, time, math, calendar
from datetime import datetime, timedelta, date
import numpy as np
import pandas as pd
import streamlit as st
import requests
from collections import defaultdict

try:
    import plotly.express as px
    import plotly.graph_objects as go
except Exception:
    px = None
    go = None

# =====================
# –ù–ê–°–¢–†–û–ô–ö–ò/–¢–ï–ú–´
# =====================
st.set_page_config(page_title="–ë–£–†–ú–ê–® ¬∑ CRM Analytics", page_icon="üìä", layout="wide")

THEME_CSS = """
<style>
[data-testid="stMetricValue"] { font-size: 28px; }
</style>
"""
st.markdown(THEME_CSS, unsafe_allow_html=True)

# =====================
# –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø
# =====================
AUTH_KEY = "burmash_auth_ok"

def require_auth():
    if AUTH_KEY not in st.session_state:
        st.session_state[AUTH_KEY] = False
    if st.session_state[AUTH_KEY]:
        return
    
    st.markdown("### üîê –í—Ö–æ–¥ ‚Äî –ë–£–†–ú–ê–®")
    with st.form("login_form", clear_on_submit=False):
        login = st.text_input("–õ–æ–≥–∏–Ω", value="", key="auth_user")
        password = st.text_input("–ü–∞—Ä–æ–ª—å", value="", type="password", key="auth_pass")
        ok = st.form_submit_button("–í–æ–π—Ç–∏")
        if ok:
            st.session_state[AUTH_KEY] = (login == "admin" and password == "admin123")
            if not st.session_state[AUTH_KEY]:
                st.error("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
            st.rerun()
    st.stop()

require_auth()

# =====================
# –°–ï–ö–†–ï–¢–´
# =====================
def get_secret(name, default=None):
    if name in st.secrets:
        return st.secrets[name]
    return os.getenv(name, default)

BITRIX24_WEBHOOK = (get_secret("BITRIX24_WEBHOOK", "") or "").strip()
PERPLEXITY_API_KEY = (get_secret("PERPLEXITY_API_KEY", "") or "").strip()

# =====================
# –ö–û–ù–°–¢–ê–ù–¢–´ –ö–≠–®–ê
# =====================
TTL_ACTIVITIES = 15*60
TTL_DEALS = 30*60
TTL_HISTORY = 30*60
TTL_DICTS = 60*60
META_PATH = os.path.join(os.getcwd(), ".burmash_cache_meta.json")

if "__refresh_token__" not in st.session_state:
    st.session_state["__refresh_token__"] = ""

# =====================
# –ú–ï–¢–ê–î–ê–ù–ù–´–ï –•–ï–õ–ü–ï–†–´
# =====================
def _read_meta():
    try:
        with open(META_PATH, "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        return {"last_updated": None, "stats": {}}

def _write_meta(meta: dict):
    try:
        with open(META_PATH, "w", encoding="utf-8") as f:
            json.dump(meta, f, ensure_ascii=False, indent=2)
    except:
        pass

# =====================
# Bitrix helpers
# =====================
SESSION = requests.Session()

def _bx_call(method, params=None, timeout=30):
    url = BITRIX24_WEBHOOK.rstrip("/") + f"/{method}.json"
    r = SESSION.get(url, params=(params or {}), timeout=timeout)
    r.raise_for_status()
    data = r.json()
    if "error" in data:
        raise RuntimeError(f"{method}: {data.get('error_description') or data.get('error')}")
    return data

def _bx_post(method, data=None, timeout=30):
    url = BITRIX24_WEBHOOK.rstrip("/") + f"/{method}.json"
    r = SESSION.post(url, data=(data or {}), timeout=timeout)
    r.raise_for_status()
    data = r.json()
    if "error" in data:
        raise RuntimeError(f"{method}: {data.get('error_description') or data.get('error')}")
    return data

def _bx_get(method, params=None, pause=0.35):
    out, start = [], 0
    params = dict(params or {})
    while True:
        params["start"] = start
        data = _bx_call(method, params=params)
        res = data.get("result")
        batch = (res.get("items", []) if isinstance(res, dict) and "items" in res else res) or []
        if not batch:
            break
        out.extend(batch)
        if len(batch) < 50 and "next" not in data:
            break
        start = data.get("next", start + 50)
        time.sleep(pause)
    return out

def _bx_batch(cmds: dict, halt=0):
    payload = {"halt": halt}
    for k, v in cmds.items():
        payload[f"cmd[{k}]"] = v
    data = _bx_post("batch", data=payload)
    return data.get("result", {}).get("result", {})

# =====================
# –ö–≠–®–ò–†–£–ï–ú–´–ï –§–£–ù–ö–¶–ò–ò
# =====================
@st.cache_data(ttl=TTL_DEALS, persist="disk")
def bx_get_deals_by_date(field_from, field_to, limit=3000, _buster=""):
    params = {"select[]":[
        "ID","TITLE","STAGE_ID","OPPORTUNITY","ASSIGNED_BY_ID","COMPANY_ID","CONTACT_ID",
        "PROBABILITY","DATE_CREATE","DATE_MODIFY","LAST_ACTIVITY_TIME","CATEGORY_ID",
        "BEGINDATE","CLOSEDATE","STAGE_SEMANTIC_ID"
    ]}
    if field_from:
        params[f"filter[>={field_from[0]}]"] = str(field_from[1])
    if field_to:
        params[f"filter[<={field_to[0]}]"] = str(field_to[1])
    deals = _bx_get("crm.deal.list", params)
    return deals[:limit]

@st.cache_data(ttl=TTL_DEALS, persist="disk")
def bx_get_deals_dual(start, end, limit=3000, _buster=""):
    created = bx_get_deals_by_date(("DATE_CREATE", start), ("DATE_CREATE", end), limit=limit, _buster=_buster)
    closed = bx_get_deals_by_date(("CLOSEDATE", start), ("CLOSEDATE", end), limit=limit, _buster=_buster)
    by_id = {}
    for r in created + closed:
        by_id[int(r["ID"])] = r
    out = [by_id[k] for k in sorted(by_id.keys())][:limit]
    return out

@st.cache_data(ttl=TTL_DICTS, persist="disk")
def bx_get_categories(_buster=""):
    try:
        cats = _bx_get("crm.dealcategory.list")
        return {int(c["ID"]): c.get("NAME","–í–æ—Ä–æ–Ω–∫–∞") for c in cats}
    except:
        return {}

@st.cache_data(ttl=TTL_DICTS, persist="disk")
def bx_get_users_full(_buster=""):
    try:
        users = _bx_get("user.get")
        return {int(u["ID"]): {"name": u.get("NAME","?")} for u in users}
    except:
        return {}

@st.cache_data(ttl=TTL_ACTIVITIES, persist="disk")
def bx_get_activities(deal_ids, include_completed=True, _buster=""):
    if not deal_ids:
        return {}
    out = {}
    for chunk_idx in range(0, len(deal_ids), 40):
        chunk = deal_ids[chunk_idx:chunk_idx+40]
        cmds = {f"d{i}": f"crm.activity.list?filter[ENTITY_ID]=deal&filter[ENTITY_TYPE]=DEAL&filter[OWNER_ID]={did}" 
                for i, did in enumerate(chunk)}
        try:
            res = _bx_batch(cmds, halt=0)
            for key, acts in res.items():
                for a in (acts or []):
                    did = int(a.get("OWNER_ID", 0))
                    if did not in out:
                        out[did] = []
                    out[did].append(a)
        except:
            pass
        time.sleep(0.3)
    return out

@st.cache_data(ttl=TTL_HISTORY, persist="disk")
def bx_get_stage_history_batch(deal_ids, batch_size=50, _buster=""):
    if not deal_ids:
        return {}
    hist_map = {}
    for chunk_idx in range(0, len(deal_ids), batch_size):
        chunk = deal_ids[chunk_idx:chunk_idx+batch_size]
        cmds = {f"h{i}": f"crm.deal.userfield.getlist?entityID={did}" 
                for i, did in enumerate(chunk)}
        try:
            res = _bx_batch(cmds, halt=0)
            for key, item in res.items():
                if item:
                    pass  # Placeholder –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
        except:
            pass
        time.sleep(0.3)
    return hist_map

def compute_health_scores(df, activities_map, stuck_days=5):
    df = df.copy()
    today = datetime.now()
    
    def last_activity_days(deal_id):
        acts = activities_map.get(int(deal_id), [])
        if not acts:
            return None
        latest = max([a.get("MODIFIED") or a.get("DATE_CREATE", "") for a in acts], default=None)
        if not latest:
            return None
        try:
            dt = datetime.fromisoformat(str(latest).replace("Z", "+00:00"))
            return (today - dt).days
        except:
            return None
    
    df["last_activity_days"] = df["ID"].map(last_activity_days)
    df["is_stuck"] = df["last_activity_days"] >= stuck_days
    df["health"] = df["STAGE_SEMANTIC_ID"].map(
        lambda x: "üî¥" if x in ["LOSE"] else "üü¢" if x in ["WON"] else "üü°"
    )
    return df

def period_range(mode, start_date=None, end_date=None, year=None, quarter=None, month=None, iso_week=None):
    today = date.today()
    
    if mode == "–ù–ò–¢":
        start = start_date or today - timedelta(days=30)
        end = today
    elif mode == "–ì–æ–¥":
        start = date(year or today.year, 1, 1)
        end = date(year or today.year, 12, 31)
    elif mode == "–ö–≤–∞—Ä—Ç–∞–ª":
        q = quarter or (today.month - 1) // 3 + 1
        start_month = (q - 1) * 3 + 1
        start = date(year or today.year, start_month, 1)
        if q == 4:
            end = date(year or today.year, 12, 31)
        else:
            end = date(year or today.year, start_month + 3, 1) - timedelta(days=1)
    elif mode == "–ú–µ—Å—è—Ü":
        m = month or today.month
        start = date(year or today.year, m, 1)
        if m == 12:
            end = date(year or today.year, 12, 31)
        else:
            end = date(year or today.year, m + 1, 1) - timedelta(days=1)
    elif mode == "–ù–µ–¥–µ–ª—è":
        y, w = iso_week or (today.isocalendar()[0], today.isocalendar()[1])
        start = datetime.fromisocalendar(y, w, 1).date()
        end = start + timedelta(days=6)
    else:  # –î–∏–∞–ø–∞–∑–æ–Ω
        start = start_date or today - timedelta(days=30)
        end = end_date or today
    
    return str(start), str(end)

# =====================
# –ê–ù–ê–õ–ò–¢–ò–ö–ê –ú–ï–¢–†–ò–ö
# =====================
def calc_conversion_rate(df_deals):
    """–ö–æ–Ω–≤–µ—Ä—Å–∏—è: —É—Å–ø–µ—à–Ω—ã–µ —Å–¥–µ–ª–∫–∏ / –≤—Å–µ —Å–¥–µ–ª–∫–∏"""
    if len(df_deals) == 0:
        return 0.0
    won = len(df_deals[df_deals["STAGE_SEMANTIC_ID"] == "WON"])
    return (won / len(df_deals)) * 100 if len(df_deals) > 0 else 0

def calc_manager_metrics(df_deals):
    """–ú–µ—Ç—Ä–∏–∫–∏ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º"""
    metrics = {}
    for mgr in df_deals["manager"].unique():
        if pd.isna(mgr) or mgr == "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ":
            continue
        mgr_deals = df_deals[df_deals["manager"] == mgr]
        won = len(mgr_deals[mgr_deals["STAGE_SEMANTIC_ID"] == "WON"])
        conv = (won / len(mgr_deals) * 100) if len(mgr_deals) > 0 else 0
        avg_check = mgr_deals["OPPORTUNITY"].sum() / len(mgr_deals) if len(mgr_deals) > 0 else 0
        revenue = mgr_deals[mgr_deals["STAGE_SEMANTIC_ID"] == "WON"]["OPPORTUNITY"].sum()
        
        metrics[mgr] = {
            "deals_count": len(mgr_deals),
            "won_count": won,
            "conversion": conv,
            "avg_check": avg_check,
            "revenue": revenue,
            "cancel_rate": 0  # –ë—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ –Ω–∏–∂–µ
        }
    return metrics

def calc_monthly_conversion(df_deals):
    """–ö–æ–Ω–≤–µ—Ä—Å–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º"""
    df_deals = df_deals.copy()
    df_deals["DATE_CREATE_month"] = pd.to_datetime(df_deals["DATE_CREATE"]).dt.to_period("M")
    
    monthly = {}
    for month in df_deals["DATE_CREATE_month"].unique():
        month_deals = df_deals[df_deals["DATE_CREATE_month"] == month]
        won = len(month_deals[month_deals["STAGE_SEMANTIC_ID"] == "WON"])
        conv = (won / len(month_deals) * 100) if len(month_deals) > 0 else 0
        monthly[str(month)] = conv
    return monthly

def calc_deal_stages_distribution(df_deals):
    """–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫ –ø–æ —Å—Ç–∞–¥–∏—è–º"""
    return df_deals["stage_name"].value_counts().to_dict()

# =====================
# –ë–û–ö–û–í–ê–Ø –ü–ê–ù–ï–õ–¨
# =====================
with st.sidebar:
    st.title("üéõÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
    btn_refresh = st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", key="btn_refresh", use_container_width=True)
    btn_clear = st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à", key="btn_clear", use_container_width=True)
    
    meta = _read_meta()
    st.caption(f"üïí –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {meta.get('last_updated') or '‚Äî'}")
    
    with st.expander("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞", expanded=False):
        st.markdown(f"""
**TTL:** –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ‚Äî 15 –º–∏–Ω, —Å–¥–µ–ª–∫–∏/–∏—Å—Ç–æ—Ä–∏—è ‚Äî 30 –º–∏–Ω, —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ ‚Äî 60 –º–∏–Ω.
**persist:** `disk` (–∫—ç—à –ø–µ—Ä–µ–∂–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫).
**–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–æ–¥–∫–∞:**
- –°–¥–µ–ª–æ–∫: {meta.get('stats',{}).get('deals_cnt','‚Äî')}
- –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π: {meta.get('stats',{}).get('acts_cnt','‚Äî')}
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {meta.get('stats',{}).get('users_cnt','‚Äî')}
        """)
    
    if btn_clear:
        try:
            st.cache_data.clear()
        except:
            pass
        try:
            if os.path.exists(META_PATH):
                os.remove(META_PATH)
        except:
            pass
        st.toast("–ö—ç—à –æ—á–∏—â–µ–Ω. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é‚Ä¶")
        st.rerun()
    
    if btn_refresh:
        st.session_state["__refresh_token__"] = str(int(time.time()))
        st.toast("–û–±–Ω–æ–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ –∏–∑ CRM‚Ä¶")
        st.rerun()

# =====================
# –§–ò–õ–¨–¢–†–´ –ü–ï–†–ò–û–î–ê
# =====================
st.sidebar.title("üìÖ –§–∏–ª—å—Ç—Ä—ã –ø–µ—Ä–∏–æ–¥–∞")

def ss_get(k, default):
    if k not in st.session_state:
        st.session_state[k] = default
    return st.session_state[k]

mode_options = ["–ù–ò–¢", "–ì–æ–¥", "–ö–≤–∞—Ä—Ç–∞–ª", "–ú–µ—Å—è—Ü", "–ù–µ–¥–µ–ª—è", "–î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç"]
default_mode = ss_get("flt_mode", "–ù–ò–¢")
mode = st.sidebar.selectbox("–†–µ–∂–∏–º –ø–µ—Ä–∏–æ–¥–∞", mode_options, index=mode_options.index(default_mode), key="flt_mode")

ss_get("flt_nit_from", datetime.now().date() - timedelta(days=30))
ss_get("flt_year", datetime.now().year)
ss_get("flt_quarter", (datetime.now().month - 1) // 3 + 1)
ss_get("flt_month", datetime.now().month)
ss_get("flt_week_year", datetime.now().isocalendar()[0])
ss_get("flt_week_num", datetime.now().isocalendar()[1])
ss_get("flt_range_from", datetime.now().date() - timedelta(days=30))
ss_get("flt_range_to", datetime.now().date())

if mode == "–ù–ò–¢":
    st.sidebar.date_input("–ù–ò–¢ ‚Äî —Å –∫–∞–∫–æ–π –¥–∞—Ç—ã", key="flt_nit_from")
elif mode == "–ì–æ–¥":
    st.sidebar.number_input("–ì–æ–¥", min_value=2020, max_value=2100, step=1, key="flt_year")
elif mode == "–ö–≤–∞—Ä—Ç–∞–ª":
    st.sidebar.number_input("–ì–æ–¥", min_value=2020, max_value=2100, step=1, key="flt_year")
    st.sidebar.selectbox("–ö–≤–∞—Ä—Ç–∞–ª", [1,2,3,4], index=st.session_state["flt_quarter"]-1, key="flt_quarter")
elif mode == "–ú–µ—Å—è—Ü":
    st.sidebar.number_input("–ì–æ–¥", min_value=2020, max_value=2100, step=1, key="flt_year")
    st.sidebar.selectbox("–ú–µ—Å—è—Ü", list(range(1,13)), index=st.session_state["flt_month"]-1, key="flt_month")
elif mode == "–ù–µ–¥–µ–ª—è":
    st.sidebar.number_input("–ì–æ–¥", min_value=2020, max_value=2100, step=1, key="flt_week_year")
    st.sidebar.number_input("ISO-–Ω–µ–¥–µ–ª—è", min_value=1, max_value=53, step=1, key="flt_week_num")
else:  # –î–∏–∞–ø–∞–∑–æ–Ω
    st.sidebar.date_input("–° –¥–∞—Ç—ã", key="flt_range_from")
    st.sidebar.date_input("–ü–æ –¥–∞—Ç—É", key="flt_range_to")

st.sidebar.title("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
st.sidebar.slider("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ‚â• (–¥–Ω–µ–π)", 2, 21, 5, key="flt_stuck_days")
st.sidebar.slider("–õ–∏–º–∏—Ç —Å–¥–µ–ª–æ–∫ (API)", 50, 3000, 1500, step=50, key="flt_limit")

def reset_filters():
    for k in list(st.session_state.keys()):
        if k.startswith("flt_"):
            del st.session_state[k]
    st.rerun()

st.sidebar.button("‚Ü∫ –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã", on_click=reset_filters, key="flt_reset_btn", use_container_width=True)

# –°–±–æ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ñ–∏–ª—å—Ç—Ä–∞
mode = st.session_state["flt_mode"]
stuck_days = st.session_state["flt_stuck_days"]
limit = st.session_state["flt_limit"]

mode_params = {
    "–ù–ò–¢": (st.session_state["flt_nit_from"], None, None, None, None, None),
    "–ì–æ–¥": (None, None, st.session_state["flt_year"], None, None, None),
    "–ö–≤–∞—Ä—Ç–∞–ª": (None, None, st.session_state["flt_year"], st.session_state["flt_quarter"], None, None),
    "–ú–µ—Å—è—Ü": (None, None, st.session_state["flt_year"], None, st.session_state["flt_month"], None),
    "–ù–µ–¥–µ–ª—è": (None, None, st.session_state["flt_week_year"], None, None, st.session_state["flt_week_num"]),
    "–î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç": (st.session_state["flt_range_from"], st.session_state["flt_range_to"], None, None, None, None),
}

start_date, end_date, year, quarter, month, iso_week = mode_params[mode]
start, end = period_range(mode, start_date=start_date, end_date=end_date, year=year, quarter=quarter, month=month, iso_week=iso_week)

# =====================
# –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–•
# =====================
if not BITRIX24_WEBHOOK:
    st.error("–ù–µ —É–∫–∞–∑–∞–Ω BITRIX24_WEBHOOK –≤ Secrets.")
    st.stop()

status = st.status("‚è≥ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏‚Ä¶", state="running")

try:
    status.update(label="‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–¥–µ–ª–æ–∫‚Ä¶", state="running")
    deals_raw = bx_get_deals_dual(start, end, limit=limit, _buster=st.session_state["__refresh_token__"])
    
    if not deals_raw:
        status.update(label="–ù–µ—Ç —Å–¥–µ–ª–æ–∫ –∑–∞ –ø–µ—Ä–∏–æ–¥.", state="error")
        st.stop()
    
    df_raw = pd.DataFrame(deals_raw)
    for c in ["OPPORTUNITY", "PROBABILITY", "ASSIGNED_BY_ID", "COMPANY_ID", "CONTACT_ID", "CATEGORY_ID"]:
        df_raw[c] = pd.to_numeric(df_raw.get(c), errors="coerce")
    
    status.update(label="üìá –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π‚Ä¶", state="running")
    users_full = bx_get_users_full(_buster=st.session_state["__refresh_token__"])
    users_map = {uid: users_full[uid]["name"] for uid in users_full}
    
    status.update(label="üìÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π‚Ä¶", state="running")
    activities = bx_get_activities(df_raw["ID"].astype(int).tolist(), include_completed=True, _buster=st.session_state["__refresh_token__"])
    
    df_all = compute_health_scores(df_raw, {k: v for k, v in activities.items() if v}, stuck_days=stuck_days)
    
    categories = bx_get_categories(_buster=st.session_state["__refresh_token__"])
    cat_ids = df_all["CATEGORY_ID"].dropna().astype(int).unique().tolist()
    
    # –°—Ç–∞–¥–∏–∏
    def fallback_sort(sid):
        FALLBACK_ORDER = ["NEW","NEW_LEAD","PREPARATION","PREPAYMENT_INVOICE","EXECUTING","FINAL_INVOICE","WON","LOSE"]
        sid = str(sid or "")
        sid_short = sid.split(":")[1] if ":" in sid else sid
        return (FALLBACK_ORDER.index(sid_short)*100 if sid_short in FALLBACK_ORDER else 10000 + hash(sid_short)%1000)
    
    df_all["stage_name"] = df_all["STAGE_ID"].astype(str)
    df_all["manager"] = df_all["ASSIGNED_BY_ID"].map(users_map).fillna("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    
    status.update(label="‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã", state="complete")
    
except Exception as e:
    status.update(label=f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", state="error")
    st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
    st.stop()

# =====================
# –û–°–ù–û–í–ù–û–ô –ò–ù–¢–ï–†–§–ï–ô–° - –í–ö–õ–ê–î–ö–ò
# =====================
tab_dashboard, tab_analytics, tab_managers, tab_history = st.tabs(
    ["üìà –î–∞—à–±–æ—Ä–¥", "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", "üë• –ú–µ–Ω–µ–¥–∂–µ—Ä—ã", "üìú –ò—Å—Ç–æ—Ä–∏—è"]
)

# ============ –¢–ê–ë 1: –î–ê–®–ë–û–†–î ============
with tab_dashboard:
    st.header("üìà –û–±–∑–æ—Ä –ø–æ –ø–µ—Ä–∏–æ–¥—É")
    
    col1, col2, col3, col4, col5 = st.columns(5)
    
    total_deals = len(df_all)
    won_deals = len(df_all[df_all["STAGE_SEMANTIC_ID"] == "WON"])
    lost_deals = len(df_all[df_all["STAGE_SEMANTIC_ID"] == "LOSE"])
    conversion = calc_conversion_rate(df_all)
    total_revenue = df_all[df_all["STAGE_SEMANTIC_ID"] == "WON"]["OPPORTUNITY"].sum()
    
    with col1:
        st.metric("üìä –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫", total_deals)
    with col2:
        st.metric("‚úÖ –í—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö", won_deals, f"{conversion:.1f}%")
    with col3:
        st.metric("‚ùå –ü—Ä–æ–∏–≥—Ä–∞–Ω–Ω—ã—Ö", lost_deals)
    with col4:
        st.metric("üí∞ –í—ã—Ä—É—á–∫–∞", f"{total_revenue/1e6:.1f}–ú" if total_revenue > 0 else "0")
    with col5:
        avg_check = df_all[df_all["STAGE_SEMANTIC_ID"] == "WON"]["OPPORTUNITY"].mean() if won_deals > 0 else 0
        st.metric("üéØ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ (–≤—ã–∏–≥—Ä.)", f"{avg_check/1e3:.0f}–ö" if avg_check > 0 else "‚Äî")
    
    # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ —Å—Ç–∞–¥–∏—è–º
    if px:
        st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç–∞–¥–∏—è–º")
        stage_dist = df_all["stage_name"].value_counts()
        fig_stages = px.bar(
            x=stage_dist.index,
            y=stage_dist.values,
            labels={"x": "–°—Ç–∞–¥–∏—è", "y": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫"},
            title="–°–¥–µ–ª–∫–∏ –ø–æ —Å—Ç–∞–¥–∏—è–º"
        )
        st.plotly_chart(fig_stages, use_container_width=True)
    
    # –¢–∞–±–ª–∏—Ü–∞ —Å–¥–µ–ª–æ–∫
    st.subheader("üìã –¢–∞–±–ª–∏—Ü–∞ —Å–¥–µ–ª–æ–∫")
    df_display = df_all[[
        "ID", "TITLE", "stage_name", "manager", "OPPORTUNITY", "STAGE_SEMANTIC_ID", "health"
    ]].copy()
    df_display.columns = ["ID", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–°—Ç–∞–¥–∏—è", "–ú–µ–Ω–µ–¥–∂–µ—Ä", "–°—É–º–º–∞", "–°—Ç–∞—Ç—É—Å", "–ó–¥–æ—Ä–æ–≤—å–µ"]
    st.dataframe(df_display, use_container_width=True)

# ============ –¢–ê–ë 2: –ê–ù–ê–õ–ò–¢–ò–ö–ê ============
with tab_analytics:
    st.header("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥–∞–∂")
    
    # üìå –û–ë–©–ò–ï –ú–ï–¢–†–ò–ö–ò
    st.subheader("üéØ –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–µ—Ä–∏–æ–¥–∞")
    col_m1, col_m2, col_m3, col_m4 = st.columns(4)
    
    conversion_pct = calc_conversion_rate(df_all)
    avg_deal_value = df_all["OPPORTUNITY"].mean() if len(df_all) > 0 else 0
    deals_with_activity = len(df_all[df_all["last_activity_days"].notna()])
    stuck_deals = len(df_all[df_all["is_stuck"] == True])
    
    with col_m1:
        st.metric("üìà –ö–æ–Ω–≤–µ—Ä—Å–∏—è", f"{conversion_pct:.2f}%")
    with col_m2:
        st.metric("üíµ –°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞", f"{avg_deal_value/1e3:.0f}–ö")
    with col_m3:
        st.metric("‚ö° –° –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é", deals_with_activity)
    with col_m4:
        st.metric("‚è∏Ô∏è –ó–∞–≤–∏—Å–ª–∞ –Ω–∞", f"{stuck_days} –¥–Ω–µ–π", stuck_deals)
    
    # üìä –¢–†–ï–ù–î–´ –ü–û –ú–ï–°–Ø–¶–ê–ú
    st.subheader("üìâ –¢—Ä–µ–Ω–¥ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –ø–æ –º–µ—Å—è—Ü–∞–º")
    monthly_conv = calc_monthly_conversion(df_all)
    
    if monthly_conv and px:
        df_monthly = pd.DataFrame(list(monthly_conv.items()), columns=["–ú–µ—Å—è—Ü", "–ö–æ–Ω–≤–µ—Ä—Å–∏—è"])
        fig_trend = px.line(df_monthly, x="–ú–µ—Å—è—Ü", y="–ö–æ–Ω–≤–µ—Ä—Å–∏—è", markers=True, title="–î–∏–Ω–∞–º–∏–∫–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏")
        st.plotly_chart(fig_trend, use_container_width=True)
    else:
        st.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞")
    
    # üìå –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–¢–ú–ï–ù
    st.subheader("üî¥ –ê–Ω–∞–ª–∏–∑ –æ—Ç–º–µ–Ω –∫–ª–∏–µ–Ω—Ç–æ–≤")
    cancelled = len(df_all[df_all["STAGE_SEMANTIC_ID"] == "LOSE"])
    cancel_pct = (cancelled / len(df_all) * 100) if len(df_all) > 0 else 0
    
    col_c1, col_c2, col_c3 = st.columns(3)
    with col_c1:
        st.metric("–û—Ç–º–µ–Ω–µ–Ω–æ —Å–¥–µ–ª–æ–∫", cancelled, f"{cancel_pct:.1f}%")
    with col_c2:
        completed = len(df_all[df_all["STAGE_SEMANTIC_ID"] == "WON"])
        st.metric("–ó–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ", completed)
    with col_c3:
        in_progress = len(df_all[~df_all["STAGE_SEMANTIC_ID"].isin(["WON", "LOSE"])])
        st.metric("–í –ø—Ä–æ—Ü–µ—Å—Å–µ", in_progress)
    
    # üí° –í–´–í–û–î–´
    st.subheader("üí° –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã–≤–æ–¥—ã")
    insights = []
    
    if conversion_pct < 3:
        insights.append("üî¥ **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è** < 3% ‚Äî —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å—Ä–æ—á–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ –≤ –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–¥–∞–∂")
    elif conversion_pct < 5:
        insights.append("üü† **–ù–∏–∑–∫–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è** 3-5% ‚Äî —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –Ω–æ—Ä–º–∞ –≤ –∫–æ–º–ø–∞–Ω–∏–∏, –≤–æ–∑–º–æ–∂–Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")
    else:
        insights.append("üü¢ **–ó–¥–æ—Ä–æ–≤–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è** > 5% ‚Äî —Ö–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
    
    if cancel_pct > 40:
        insights.append("üî¥ **–í—ã—Å–æ–∫–∞—è –æ—Ç–º–µ–Ω–∞** > 40% ‚Äî –∫–∞—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤ —Ç—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è")
    
    if stuck_deals > len(df_all) * 0.2:
        insights.append("üü† **–ú–Ω–æ–≥–æ –∑–∞–≤–∏—Å—à–∏—Ö —Å–¥–µ–ª–æ–∫** ‚Äî —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏")
    
    for insight in insights:
        st.info(insight)

# ============ –¢–ê–ë 3: –ú–ï–ù–ï–î–ñ–ï–†–´ ============
with tab_managers:
    st.header("üë• –ê–Ω–∞–ª–∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤")
    
    manager_metrics = calc_manager_metrics(df_all)
    
    if manager_metrics:
        # –¢–∞–±–ª–∏—Ü–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        metrics_data = []
        for mgr, data in sorted(manager_metrics.items(), key=lambda x: x[1]["conversion"], reverse=True):
            metrics_data.append({
                "–ú–µ–Ω–µ–¥–∂–µ—Ä": mgr,
                "–°–¥–µ–ª–æ–∫": data["deals_count"],
                "–í—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö": data["won_count"],
                "–ö–æ–Ω–≤–µ—Ä—Å–∏—è %": f"{data['conversion']:.2f}%",
                "–°—Ä–µ–¥–Ω–∏–π —á–µ–∫": f"{data['avg_check']/1e3:.0f}–ö",
                "–í—ã—Ä—É—á–∫–∞": f"{data['revenue']/1e6:.1f}–ú"
            })
        
        df_metrics = pd.DataFrame(metrics_data)
        st.dataframe(df_metrics, use_container_width=True)
        
        # –ì—Ä–∞—Ñ–∏–∫ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
        if px:
            mgrs = list(manager_metrics.keys())
            convs = [manager_metrics[m]["conversion"] for m in mgrs]
            fig_mgr = px.bar(x=mgrs, y=convs, labels={"x": "–ú–µ–Ω–µ–¥–∂–µ—Ä", "y": "–ö–æ–Ω–≤–µ—Ä—Å–∏—è %"}, title="–ö–æ–Ω–≤–µ—Ä—Å–∏—è –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º")
            st.plotly_chart(fig_mgr, use_container_width=True)
    else:
        st.info("–î–∞–Ω–Ω—ã–µ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

# ============ –¢–ê–ë 4: –ò–°–¢–û–†–ò–Ø ============
with tab_history:
    st.header("üìú –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫")
    
    st.subheader("–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è")
    df_recent = df_all.sort_values("DATE_MODIFY", ascending=False).head(10)
    df_recent_display = df_recent[[
        "ID", "TITLE", "manager", "OPPORTUNITY", "stage_name", "DATE_MODIFY"
    ]].copy()
    df_recent_display.columns = ["ID", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–ú–µ–Ω–µ–¥–∂–µ—Ä", "–°—É–º–º–∞", "–°—Ç–∞–¥–∏—è", "–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ"]
    st.dataframe(df_recent_display, use_container_width=True)
    
    st.subheader("–§–∏–ª—å—Ç—Ä –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É")
    selected_manager = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞", ["–í—Å–µ"] + list(df_all["manager"].unique()))
    
    if selected_manager == "–í—Å–µ":
        df_filtered = df_all
    else:
        df_filtered = df_all[df_all["manager"] == selected_manager]
    
    st.metric(f"–°–¥–µ–ª–æ–∫ —É {selected_manager}", len(df_filtered))
    
    df_filtered_display = df_filtered[[
        "ID", "TITLE", "OPPORTUNITY", "stage_name", "DATE_CREATE", "STAGE_SEMANTIC_ID"
    ]].copy()
    df_filtered_display.columns = ["ID", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–°—É–º–º–∞", "–°—Ç–∞–¥–∏—è", "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è", "–°—Ç–∞—Ç—É—Å"]
    st.dataframe(df_filtered_display, use_container_width=True)

# =====================
# –ú–ï–¢–ê–î–ê–ù–ù–´–ï –û–ë–ù–û–í–õ–ï–ù–ò–Ø
# =====================
meta = {
    "last_updated": datetime.now().strftime("%d.%m.%Y %H:%M"),
    "stats": {
        "deals_cnt": len(df_all),
        "acts_cnt": len(activities),
        "users_cnt": len(users_full),
        "cats_cnt": len(categories)
    }
}
_write_meta(meta)
