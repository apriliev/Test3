# -*- coding: utf-8 -*-
"""
–ë–£–†–ú–ê–® ¬∑ –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –û–ü 2023-2025"
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ä–∞—Å—á—ë—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –≤—ã–≤–æ–¥–∞–º –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
"""

import pandas as pd
import numpy as np
from datetime import datetime, timedelta


class DocumentAnalytics:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç—Ä–∏–∫ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¥–∞–Ω–Ω—ã–º –∏–∑ "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞-–û–ü-2023-2025-v3.docx"
    """
    
    def __init__(self, df_deals):
        """
        df_deals: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–¥–µ–ª–æ–∫
        –û–∂–∏–¥–∞–µ–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏: 
        - ASSIGNED_BY_ID, MANAGER_NAME
        - OPPORTUNITY
        - STAGE_SEMANTIC_ID (WON, LOSE, etc)
        - DATE_CREATE, CLOSEDATE
        """
        self.df = df_deals.copy()
        self._standardize()
    
    def _standardize(self):
        """–°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        self.df["OPPORTUNITY"] = pd.to_numeric(self.df["OPPORTUNITY"], errors="coerce").fillna(0)
        for col in ["DATE_CREATE", "DATE_MODIFY", "CLOSEDATE"]:
            if col in self.df.columns:
                self.df[col] = pd.to_datetime(self.df[col], errors="coerce")
        self.df["is_won"] = self.df["STAGE_SEMANTIC_ID"] == "WON"
        self.df["is_lost"] = self.df["STAGE_SEMANTIC_ID"] == "LOSE"
    
    # ==================== –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –í–´–í–û–î–´ ====================
    
    def main_problem_assessment(self):
        """
        –ì–ª–∞–≤–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞:
        "–£–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–∏–π –∫—Ä–∏–∑–∏—Å, –∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–æ—Å—Ç–æ–º –æ–±—ä—ë–º–æ–≤"
        """
        yearly_data = {}
        
        for year in sorted(self.df["DATE_CREATE"].dt.year.unique()):
            year_df = self.df[self.df["DATE_CREATE"].dt.year == year]
            total = len(year_df)
            won = len(year_df[year_df["is_won"]])
            conv = (won / total * 100) if total > 0 else 0
            revenue = year_df[year_df["is_won"]]["OPPORTUNITY"].sum()
            
            yearly_data[year] = {
                "deals": total,
                "won": won,
                "conversion": conv,
                "revenue": revenue,
                "avg_check": year_df["OPPORTUNITY"].mean()
            }
        
        # –ê–Ω–∞–ª–∏–∑ –ø–∞–¥–µ–Ω–∏—è
        assessment = {
            "yearly": yearly_data,
            "problem": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–¥–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –≥–æ–¥ –∫ –≥–æ–¥—É",
            "critical": False
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å
        years = sorted(yearly_data.keys())
        if len(years) >= 2:
            prev_year = yearly_data[years[-2]]["conversion"]
            curr_year = yearly_data[years[-1]]["conversion"]
            fall_pct = ((curr_year - prev_year) / prev_year * 100) if prev_year > 0 else 0
            
            assessment["fall_pct"] = fall_pct
            assessment["critical"] = fall_pct < -15  # 15%+ –ø–∞–¥–µ–Ω–∏–µ ‚Äî –∫—Ä–∏—Ç–∏—á–Ω–æ
            assessment["problem"] = f"–ü–∞–¥–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –Ω–∞ {abs(fall_pct):.1f}%" if fall_pct < 0 else f"–†–æ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –Ω–∞ {fall_pct:.1f}%"
        
        return assessment
    
    # ==================== –ê–ù–ê–õ–ò–ó –¢–†–Å–• –ü–†–û–ë–õ–ï–ú ====================
    
    def problem_1_management_crisis(self, crisis_manager_name=None):
        """
        –ü—Ä–æ–±–ª–µ–º–∞ 1: –£–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–∏–π –∫—Ä–∏–∑–∏—Å (–Ω–æ–≤—ã–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å)
        –ò–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞: "–Æ—Ä–∏–π –ë—É—Ö–∞–Ω–æ–≤ ‚Äî –Ω–æ–≤—ã–π –ö–î+–†–û–ü"
        """
        if not crisis_manager_name:
            return {"status": "–¢—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å –∏–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"}
        
        mgr_df = self.df[self.df.get("MANAGER_NAME", "") == crisis_manager_name]
        
        if len(mgr_df) == 0:
            return {"status": f"–ú–µ–Ω–µ–¥–∂–µ—Ä '{crisis_manager_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω"}
        
        total = len(mgr_df)
        won = len(mgr_df[mgr_df["is_won"]])
        conversion = (won / total * 100) if total > 0 else 0
        business_trips = 0  # –ò–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞: 9 –ø–æ–µ–∑–¥–æ–∫
        business_trip_cost = 0  # –ò–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞: 172K
        
        return {
            "manager": crisis_manager_name,
            "total_deals": total,
            "won_deals": won,
            "conversion": conversion,
            "status": "üî¥ –ö–†–ò–ó–ò–°" if conversion == 0 else "üü† –ö–†–ò–¢–ò–ß–ù–û",
            "business_trips": business_trips,
            "business_trip_cost": business_trip_cost,
            "roi": 0 if business_trip_cost == 0 else (0 / business_trip_cost * 100),
            "impact_on_team": "–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑"
        }
    
    def problem_2_employee_crisis(self, crisis_employee_name=None):
        """
        –ü—Ä–æ–±–ª–µ–º–∞ 2: –ö—Ä–∏–∑–∏—Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (–∫–∞–∫ –ê—Ä—Ç–µ–º –ï–ª–∫–∏–Ω)
        –ò–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞: "3 –º–µ—Å—è—Ü–∞ –ø–æ–¥—Ä—è–¥ 0%"
        """
        if not crisis_employee_name:
            return {"status": "–¢—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"}
        
        emp_df = self.df[self.df.get("MANAGER_NAME", "") == crisis_employee_name]
        
        if len(emp_df) == 0:
            return {"status": f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ '{crisis_employee_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω"}
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –º–µ—Å—è—Ü–∞–º
        monthly_conv = {}
        emp_df["year_month"] = emp_df["DATE_CREATE"].dt.to_period("M")
        
        zero_months = 0
        for month in sorted(emp_df["year_month"].unique()):
            month_df = emp_df[emp_df["year_month"] == month]
            won = len(month_df[month_df["is_won"]])
            total = len(month_df)
            conv = (won / total * 100) if total > 0 else 0
            monthly_conv[str(month)] = conv
            
            if conv == 0:
                zero_months += 1
        
        total_deals = len(emp_df)
        won_deals = len(emp_df[emp_df["is_won"]])
        overall_conv = (won_deals / total_deals * 100) if total_deals > 0 else 0
        
        return {
            "employee": crisis_employee_name,
            "total_deals": total_deals,
            "won_deals": won_deals,
            "overall_conversion": overall_conv,
            "monthly_conversion": monthly_conv,
            "zero_months_count": zero_months,
            "status": "üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô" if zero_months >= 3 else "üü† –í–ù–ò–ú–ê–ù–ò–ï",
            "potential_loss": total_deals * 50000 if zero_months >= 3 else 0  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        }
    
    def problem_3_system_degradation(self):
        """
        –ü—Ä–æ–±–ª–µ–º–∞ 3: –°–∏—Å—Ç–µ–º–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞
        –ò–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞: 2023: 7.28% ‚Üí 2024: 4.79% ‚Üí 2025: 3.53%
        """
        yearly_data = {}
        
        for year in sorted(self.df["DATE_CREATE"].dt.year.unique()):
            year_df = self.df[self.df["DATE_CREATE"].dt.year == year]
            total = len(year_df)
            won = len(year_df[year_df["is_won"]])
            conv = (won / total * 100) if total > 0 else 0
            
            yearly_data[year] = {
                "conversion": conv,
                "deals": total,
                "won": won
            }
        
        # –ê–Ω–∞–ª–∏–∑ –ø–∞–¥–µ–Ω–∏—è
        years = sorted(yearly_data.keys())
        total_fall = 0
        if len(years) >= 2:
            total_fall = ((yearly_data[years[-1]]["conversion"] - yearly_data[years[0]]["conversion"]) / yearly_data[years[0]]["conversion"] * 100) if yearly_data[years[0]]["conversion"] > 0 else 0
        
        return {
            "yearly_conversion": yearly_data,
            "total_fall_pct": total_fall,
            "status": "üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø" if total_fall < -30 else "üü† –°–ï–†–¨–Å–ó–ù–ê–Ø",
            "interpretation": "–ü—Ä–æ–±–ª–µ–º–∞ –Ω–µ –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–∞—Ö, –∞ –≤ —Å–∏—Å—Ç–µ–º–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –∫–∞—á–µ—Å—Ç–≤–µ –ª–∏–¥–æ–≤"
        }
    
    # ==================== –¢–†–ò –£–°–ü–ï–•–ê ====================
    
    def success_1_best_manager(self):
        """
        –£—Å–ø–µ—Ö 1: –õ—É—á—à–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä (–∫–∞–∫ –ü–∞–≤–µ–ª –ö–∞–∑–∞–Ω—Ü–µ–≤)
        –ò–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞: 8.65% –∫–æ–Ω–≤–µ—Ä—Å–∏—è, 56% –æ—Ç –≤—Å–µ—Ö —É—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
        """
        manager_stats = {}
        
        for mgr in self.df.get("MANAGER_NAME", self.df["ASSIGNED_BY_ID"]).unique():
            mgr_df = self.df[self.df.get("MANAGER_NAME", self.df["ASSIGNED_BY_ID"]) == mgr]
            total = len(mgr_df)
            won = len(mgr_df[mgr_df["is_won"]])
            conv = (won / total * 100) if total > 0 else 0
            
            manager_stats[str(mgr)] = {
                "conversion": conv,
                "won": won,
                "total": total
            }
        
        # –õ—É—á—à–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä
        best_mgr = max(manager_stats.items(), key=lambda x: x[1]["conversion"])
        
        return {
            "best_manager": best_mgr[0],
            "conversion": best_mgr[1]["conversion"],
            "won_deals": best_mgr[1]["won"],
            "total_deals": best_mgr[1]["total"],
            "status": "üü¢ –ó–í–ï–ó–î–ê –ö–û–ú–ü–ê–ù–ò–ò",
            "potential": "–ü—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ 15% –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –≤—ã—Ä—É—á–∫–∞ –º–æ–∂–µ—Ç –≤—ã—Ä–∞—Å—Ç–∏ –Ω–∞ 88–ú"
        }
    
    def success_2_growing_manager(self):
        """
        –£—Å–ø–µ—Ö 2: –†–∞—Å—Ç—É—â–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä (–∫–∞–∫ –õ—é–±–æ–≤—å –°–æ–ª–æ–≤—å–µ–≤–∞)
        –ò–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞: —Ä–æ—Å—Ç 1.5% ‚Üí 6.25% (+319%)
        """
        # –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ç—É—â–∏—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        monthly_mgr_conv = {}
        
        self.df["year_month"] = self.df["DATE_CREATE"].dt.to_period("M")
        
        for mgr in self.df.get("MANAGER_NAME", self.df["ASSIGNED_BY_ID"]).unique():
            mgr_df = self.df[self.df.get("MANAGER_NAME", self.df["ASSIGNED_BY_ID"]) == mgr]
            
            months_data = {}
            for month in sorted(mgr_df["year_month"].unique()):
                month_df = mgr_df[mgr_df["year_month"] == month]
                won = len(month_df[month_df["is_won"]])
                total = len(month_df)
                conv = (won / total * 100) if total > 0 else 0
                months_data[str(month)] = conv
            
            if len(months_data) >= 2:
                first_conv = list(months_data.values())[0]
                last_conv = list(months_data.values())[-1]
                growth = ((last_conv - first_conv) / first_conv * 100) if first_conv > 0 else 0
                
                if growth > 100:  # 100%+ —Ä–æ—Å—Ç
                    monthly_mgr_conv[str(mgr)] = {
                        "growth_pct": growth,
                        "first_conv": first_conv,
                        "last_conv": last_conv,
                        "potential": last_conv * 5  # –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª –ø–µ—Ä–µ–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏
                    }
        
        if monthly_mgr_conv:
            best_growing = max(monthly_mgr_conv.items(), key=lambda x: x[1]["growth_pct"])
            return {
                "manager": best_growing[0],
                "growth_pct": best_growing[1]["growth_pct"],
                "from_conversion": best_growing[1]["first_conv"],
                "to_conversion": best_growing[1]["last_conv"],
                "potential_revenue": f"+30–ú –ø—Ä–∏ –ø–µ—Ä–µ–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞ —Å—Ä–µ–¥–Ω–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤",
                "status": "üü¢ –í–´–°–û–ö–ò–ô –ü–û–¢–ï–ù–¶–ò–ê–õ"
            }
        else:
            return {"status": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ç—É—â–∏—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–∞—Ö"}
    
    def success_3_business_trips_roi(self, trips_cost=160000, trips_revenue=38900000):
        """
        –£—Å–ø–µ—Ö 3: ROI –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–æ–∫
        –ò–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞: 160K –∑–∞—Ç—Ä–∞—Ç ‚Üí 38.9–ú –≤—ã—Ä—É—á–∫–∏ = 24,277% ROI
        """
        roi = (trips_revenue / trips_cost * 100) if trips_cost > 0 else 0
        roi_per_ruble = trips_revenue / trips_cost if trips_cost > 0 else 0
        
        return {
            "cost": trips_cost,
            "revenue": trips_revenue,
            "roi": roi,
            "roi_per_ruble": roi_per_ruble,
            "status": "üü¢ –°–£–ü–ï–†-–î–û–•–û–î–ù–û",
            "interpretation": f"1 —Ä—É–±–ª—å –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∏ ‚Üí {roi_per_ruble:.0f} —Ä—É–±–ª–µ–π –≤—ã—Ä—É—á–∫–∏"
        }
    
    # ==================== –§–ò–ù–ê–ù–°–û–í–´–ï –°–¶–ï–ù–ê–†–ò–ò ====================
    
    def financial_scenarios(self):
        """
        –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        –¢–µ–∫—É—â–µ–µ: 3.53%, –ù–æ—Ä–º–∞: 5%, 2023 —É—Ä–æ–≤–µ–Ω—å: 7.28%
        """
        total_deals = len(self.df)
        current_conv = (len(self.df[self.df["is_won"]]) / total_deals * 100) if total_deals > 0 else 0
        current_revenue = self.df[self.df["is_won"]]["OPPORTUNITY"].sum()
        avg_opportunity = self.df["OPPORTUNITY"].mean()
        
        scenarios = {
            "current": {
                "conversion": current_conv,
                "deals": total_deals,
                "revenue": current_revenue,
                "scenario": "–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"
            },
            "norm": {
                "conversion": 5.0,
                "deals": total_deals,
                "revenue": (total_deals * 5 / 100) * avg_opportunity,
                "scenario": "–ù–æ—Ä–º–∞ (5%)",
                "potential_add": f"+73–ú/–≥–æ–¥"
            },
            "2023_level": {
                "conversion": 7.28,
                "deals": total_deals,
                "revenue": (total_deals * 7.28 / 100) * avg_opportunity,
                "scenario": "2023 —É—Ä–æ–≤–µ–Ω—å (7.28%)",
                "potential_add": f"+111–ú/–≥–æ–¥"
            }
        }
        
        return scenarios
    
    # ==================== –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò ====================
    
    def quick_wins_potential(self):
        """
        –ù–∏–∑–∫–æ –≤–∏—Å—è—â–∏–µ –ø–ª–æ–¥—ã (Quick Wins) –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        """
        wins = {
            "requalification": {
                "action": "–ü–µ—Ä–µ–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–∞—Å—Ç—É—â–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞",
                "potential": "+30–ú",
                "priority": 1
            },
            "best_leads": {
                "action": "–õ—É—á—à–∏–µ –ª–∏–¥—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞",
                "potential": "+40–ú",
                "priority": 2
            },
            "lead_matching": {
                "action": "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–∞—Ç—á–∏–Ω–≥ –ª–∏–¥–æ–≤ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º",
                "potential": "+80–ú",
                "priority": 3
            },
            "specialization": {
                "action": "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Ö–¥–∏—Ä–∞",
                "potential": "+20–ú",
                "priority": 4
            }
        }
        
        total_potential = 30 + 40 + 80 + 20  # 170–ú
        
        return {
            "wins": wins,
            "total_potential": f"+{total_potential}–ú",
            "impact": "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ —É–¥–≤–æ–µ–Ω–∏–µ –≤—ã—Ä—É—á–∫–∏ –±–µ–∑ –Ω–æ–≤—ã—Ö –ª–∏–¥–æ–≤"
        }


# ====================================
# –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –í STREAMLIT
# ====================================

def render_critical_analysis(df_deals):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –≤ Streamlit
    """
    import streamlit as st
    
    analytics = DocumentAnalytics(df_deals)
    
    st.header("üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑")
    
    # –ì–ª–∞–≤–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞
    main = analytics.main_problem_assessment()
    st.subheader("–ì–ª–∞–≤–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞")
    col1, col2 = st.columns(2)
    with col1:
        st.metric("–°—Ç–∞—Ç—É—Å", "üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø" if main["critical"] else "üü† –í–ù–ò–ú–ê–ù–ò–ï")
    with col2:
        st.metric("–ü–∞–¥–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏", f"{main.get('fall_pct', 0):.1f}%", main["problem"])
    
    # –¢—Ä–∏ –ø—Ä–æ–±–ª–µ–º—ã
    st.subheader("–¢—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã")
    tab1, tab2, tab3 = st.tabs(["–£–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–∏–π –∫—Ä–∏–∑–∏—Å", "–ö—Ä–∏–∑–∏—Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", "–°–∏—Å—Ç–µ–º–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ"])
    
    with tab1:
        st.info("–£–∫–∞–∑–∞—Ç—å –∏–º—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        manager_name = st.text_input("–ò–º—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è", "")
        if manager_name:
            problem1 = analytics.problem_1_management_crisis(manager_name)
            st.json(problem1)
    
    with tab2:
        st.info("–£–∫–∞–∑–∞—Ç—å –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        emp_name = st.text_input("–ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", "")
        if emp_name:
            problem2 = analytics.problem_2_employee_crisis(emp_name)
            st.json(problem2)
    
    with tab3:
        problem3 = analytics.problem_3_system_degradation()
        st.json(problem3)
    
    # –¢—Ä–∏ —É—Å–ø–µ—Ö–∞
    st.subheader("‚úÖ –¢—Ä–∏ –≥–ª–∞–≤–Ω—ã—Ö —É—Å–ø–µ—Ö–∞")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        success1 = analytics.success_1_best_manager()
        st.metric("–õ—É—á—à–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä", success1["best_manager"], f"{success1['conversion']:.2f}%")
    
    with col2:
        success2 = analytics.success_2_growing_manager()
        if "manager" in success2:
            st.metric("–†–∞—Å—Ç—É—â–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä", success2["manager"], f"+{success2['growth_pct']:.0f}%")
    
    with col3:
        success3 = analytics.success_3_business_trips_roi()
        st.metric("ROI –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–æ–∫", f"{success3['roi']:.0f}%", f"{success3['roi_per_ruble']:.0f}:1")
    
    # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
    st.subheader("üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏")
    scenarios = analytics.financial_scenarios()
    for key, scenario in scenarios.items():
        if key != "current":
            st.success(f"{scenario['scenario']}: +{scenario['revenue']/1e6:.0f}–ú ({scenario['potential_add']})")
    
    # Quick wins
    st.subheader("‚ö° –ù–∏–∑–∫–æ –≤–∏—Å—è—â–∏–µ –ø–ª–æ–¥—ã")
    wins = analytics.quick_wins_potential()
    st.success(f"–û–±—â–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª: {wins['total_potential']}")
    for action, data in wins['wins'].items():
        st.info(f"{data['priority']}. {data['action']} ‚Äî {data['potential']}")


if __name__ == "__main__":
    print("‚úÖ –ú–æ–¥—É–ª—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
