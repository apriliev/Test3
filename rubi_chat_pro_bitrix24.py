# -*- coding: utf-8 -*-
"""
RUBI CHAT PRO v3.0 - –° –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –ó–ê–ì–†–£–ó–ö–û–ô –ó–í–û–ù–ö–û–í –ò–ó BITRIX24
–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–æ–≥ RUBI Chat —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–µ–π –∑–≤–æ–Ω–∫–æ–≤ —á–µ—Ä–µ–∑ OpenAI Whisper
–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ AI –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª–æ–º –ø—Ä–æ–¥–∞–∂
–ì–û–¢–û–í–û –ö –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–Æ –ù–ê GITHUB + STREAMLIT CLOUD
"""

import os
import json
import time
from datetime import datetime, timedelta, date
from pathlib import Path
import requests
from dotenv import load_dotenv
from io import BytesIO
import threading
from queue import Queue

import numpy as np
import pandas as pd
import streamlit as st
from openai import OpenAI
import plotly.express as px
import plotly.graph_objects as go

# =====================
# –ó–ê–ì–†–£–ó–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò
# =====================
load_dotenv()

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
BITRIX24_WEBHOOK = os.getenv("BITRIX24_WEBHOOK", "")

if not OPENAI_API_KEY:
    st.error("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    st.stop()

if not BITRIX24_WEBHOOK:
    st.warning("‚ö†Ô∏è BITRIX24_WEBHOOK –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –∑–≤–æ–Ω–∫–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")

client = OpenAI(api_key=OPENAI_API_KEY)

# =====================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø STREAMLIT
# =====================
st.set_page_config(
    page_title="RUBI CHAT PRO v3.0",
    page_icon="üî•",
    layout="wide",
    initial_sidebar_state="expanded"
)

# =====================
# –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø
# =====================
AUTH_KEY = "rubi_chat_pro_auth_v3"

def require_auth():
    if AUTH_KEY not in st.session_state:
        st.session_state[AUTH_KEY] = False
    
    if st.session_state[AUTH_KEY]:
        return True
    
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        st.markdown("### üîê –í—Ö–æ–¥ –≤ RUBI CHAT PRO v3.0")
        st.markdown("**–° –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π –∑–≤–æ–Ω–∫–æ–≤ –∏–∑ Bitrix24**")
        
        with st.form("login_form", clear_on_submit=False):
            login = st.text_input("–õ–æ–≥–∏–Ω", value="admin")
            password = st.text_input("–ü–∞—Ä–æ–ª—å", value="admin", type="password")
            submitted = st.form_submit_button("‚úÖ –í–æ–π—Ç–∏", use_container_width=True)
            
            if submitted:
                if login == "admin" and password == "admin":
                    st.session_state[AUTH_KEY] = True
                    st.rerun()
                else:
                    st.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
        
        st.markdown("---")
        st.info("üìù –¢–µ—Å—Ç–æ–≤—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: admin / admin")
    
    return False

# =====================
# –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° BITRIX24
# =====================

@st.cache_resource
def get_bitrix_client():
    """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç Bitrix24"""
    if not BITRIX24_WEBHOOK:
        return None
    return BITRIX24_WEBHOOK

def get_calls_from_bitrix() -> list:
    """
    –ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å–∏ –∑–≤–æ–Ω–∫–æ–≤ –∏–∑ Bitrix24
    API: crm.activity.list
    """
    if not BITRIX24_WEBHOOK:
        st.warning("Bitrix24 webhook –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return []
    
    try:
        url = f"{BITRIX24_WEBHOOK}crm.activity.list.json"
        
        params = {
            "filter[SUBJECT]": "–ó–≤–æ–Ω–æ–∫",
            "filter[TYPE_ID]": "1",  # Phone call
            "select": ["ID", "OWNER_ID", "OWNER_TYPE_ID", "SUBJECT", "CREATED", "DESCRIPTION"],
            "limit": 50
        }
        
        response = requests.get(url, params=params, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            return data.get("result", [])
        else:
            st.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Bitrix24: {response.status_code}")
            return []
            
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑ Bitrix24: {str(e)}")
        return []

def get_deal_info(deal_id: str) -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–¥–µ–ª–∫–µ"""
    if not BITRIX24_WEBHOOK:
        return {}
    
    try:
        url = f"{BITRIX24_WEBHOOK}crm.deal.get.json"
        
        params = {
            "id": deal_id
        }
        
        response = requests.get(url, params=params, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            return data.get("result", {})
        else:
            return {}
            
    except Exception as e:
        return {}

def get_call_recording_url(call_id: str) -> str:
    """
    –ü–æ–ª—É—á–∏—Ç—å URL –∑–∞–ø–∏—Å–∏ –∑–≤–æ–Ω–∫–∞ –∏–∑ Bitrix24
    """
    if not BITRIX24_WEBHOOK:
        return ""
    
    try:
        url = f"{BITRIX24_WEBHOOK}telephony.externalcall.finish.json"
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–≤–æ–Ω–∫–µ
        params = {
            "CALL_ID": call_id
        }
        
        response = requests.get(url, params=params, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            if "result" in data and "RECORD_URL" in data["result"]:
                return data["result"]["RECORD_URL"]
        
        return ""
        
    except Exception as e:
        return ""

def download_call_recording(record_url: str) -> bytes:
    """–°–∫–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å –∑–≤–æ–Ω–∫–∞"""
    try:
        response = requests.get(record_url, timeout=30)
        
        if response.status_code == 200:
            return response.content
        else:
            return None
            
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {str(e)}")
        return None

def save_analysis_to_bitrix(deal_id: str, analysis: dict):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤ Bitrix24 –∫–∞–∫ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ"""
    if not BITRIX24_WEBHOOK:
        return False
    
    try:
        note_text = f"""
        üìä –ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê –ó–í–û–ù–ö–ê - RUBI CHAT PRO
        
        ‚≠ê –û—Ü–µ–Ω–∫–∞: {analysis.get('total_score', 0)}/20
        
        –ö—Ä–∏—Ç–µ—Ä–∏–∏:
        - üé§ –í–µ–∂–ª–∏–≤–æ—Å—Ç—å: {analysis.get('scores', {}).get('politeness', 0)}/5
        - üëÇ –ü–æ–Ω–∏–º–∞–Ω–∏–µ: {analysis.get('scores', {}).get('understanding', 0)}/5
        - üíº –†–µ—à–µ–Ω–∏–µ: {analysis.get('scores', {}).get('solution', 0)}/5
        - ‚úçÔ∏è –ó–∞–∫—Ä—ã—Ç–∏–µ: {analysis.get('scores', {}).get('closing', 0)}/5
        
        üòä –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {analysis.get('sentiment', 'N/A')}
        
        üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
        {chr(10).join(f"‚Ä¢ {rec}" for rec in analysis.get('recommendations', []))}
        """
        
        url = f"{BITRIX24_WEBHOOK}crm.activity.add.json"
        
        data = {
            "fields": {
                "OWNER_ID": deal_id,
                "OWNER_TYPE_ID": "2",  # Deal
                "TYPE_ID": "4",  # Note
                "DESCRIPTION": note_text,
                "SUBJECT": "ü§ñ –ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê –ó–í–û–ù–ö–ê"
            }
        }
        
        response = requests.post(url, json=data, timeout=10)
        
        return response.status_code == 200
        
    except Exception as e:
        st.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –≤ Bitrix24: {str(e)}")
        return False

# =====================
# –§–£–ù–ö–¶–ò–ò –ê–ù–ê–õ–ò–ó–ê
# =====================

def transcribe_audio_with_whisper(audio_data: bytes) -> str:
    """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è —á–µ—Ä–µ–∑ OpenAI Whisper"""
    try:
        audio_file = BytesIO(audio_data)
        audio_file.name = "call.mp3"
        
        st.info("üéôÔ∏è –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∑–≤–æ–Ω–æ–∫...")
        
        transcript = client.audio.transcriptions.create(
            model="whisper-1",
            file=audio_file,
            language="ru"
        )
        
        st.success("‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        return transcript.text
        
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {str(e)}")
        return ""

def analyze_transcript_with_gpt(transcription: str) -> dict:
    """–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∑–≤–æ–Ω–∫–∞ —Å –ø–æ–º–æ—â—å—é GPT-4"""
    try:
        st.info("ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∑–≤–æ–Ω–∫–∞...")
        
        prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä –º–µ–∂–¥—É –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –∏ –∫–ª–∏–µ–Ω—Ç–æ–º.
        
–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è:
{transcription}

–î–∞–π –æ—Ü–µ–Ω–∫—É –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º (–∫–∞–∂–¥—ã–π –ø–æ 5 –±–∞–ª–ª–∞–º):
1. –í–ï–ñ–õ–ò–í–û–°–¢–¨ –ò –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–ò–ó–ú
2. –ü–û–ù–ò–ú–ê–ù–ò–ï –ü–û–¢–†–ï–ë–ù–û–°–¢–ï–ô
3. –ü–†–ï–î–°–¢–ê–í–õ–ï–ù–ò–ï –†–ï–®–ï–ù–ò–Ø
4. –ó–ê–ö–†–´–¢–ò–ï –°–î–ï–õ–ö–ò

–¢–∞–∫–∂–µ –æ–ø—Ä–µ–¥–µ–ª–∏:
- –¢–û–ù–ê–õ–¨–ù–û–°–¢–¨ (–ü–æ–∑–∏—Ç–∏–≤–Ω–∞—è/–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è/–ù–µ–≥–∞—Ç–∏–≤–Ω–∞—è)
- –ö–õ–Æ–ß–ï–í–´–ï –ú–û–ú–ï–ù–¢–´ (3-5 –∫–ª—é—á–µ–≤—ã—Ö —Ñ—Ä–∞–∑)
- –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è (2-3 –ø—É–Ω–∫—Ç–∞)

–û—Ç–≤–µ—Ç –¥–∞–π –≤ JSON:
{{
    "politeness": <0-5>,
    "understanding": <0-5>,
    "solution": <0-5>,
    "closing": <0-5>,
    "sentiment": "<–ü–æ–∑–∏—Ç–∏–≤–Ω–∞—è/–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è/–ù–µ–≥–∞—Ç–∏–≤–Ω–∞—è>",
    "key_phrases": ["—Ñ—Ä–∞–∑–∞1", "—Ñ—Ä–∞–∑–∞2", "—Ñ—Ä–∞–∑–∞3"],
    "recommendations": ["—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è1", "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è2"]
}}"""
        
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {
                    "role": "system",
                    "content": "–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –æ—Ü–µ–Ω–∫–µ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ –≤ sales."
                },
                {
                    "role": "user",
                    "content": prompt
                }
            ],
            temperature=0.7,
            max_tokens=1000
        )
        
        response_text = response.choices[0].message.content
        
        start_idx = response_text.find('{')
        end_idx = response_text.rfind('}') + 1
        json_str = response_text[start_idx:end_idx]
        
        analysis = json.loads(json_str)
        
        total = (analysis.get("politeness", 0) + 
                analysis.get("understanding", 0) + 
                analysis.get("solution", 0) + 
                analysis.get("closing", 0))
        
        analysis["total_score"] = total
        
        st.success("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
        return analysis
        
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}")
        return {}

# =====================
# MOCK –î–ê–ù–ù–´–ï
# =====================
MANAGERS_DATA = [
    {"id": 1, "name": "–ú–µ–Ω–µ–¥–∂–µ—Ä –ò–≤–∞–Ω", "health": 89, "targets": 1000000, "fact": 850000},
    {"id": 2, "name": "–ú–µ–Ω–µ–¥–∂–µ—Ä –ò—Ä–∏–Ω–∞", "health": 65, "targets": 1000000, "fact": 580000},
    {"id": 3, "name": "–ú–µ–Ω–µ–¥–∂–µ—Ä –ê—Ä—Ç–µ–º", "health": 74, "targets": 900000, "fact": 430000},
    {"id": 4, "name": "–ú–µ–Ω–µ–¥–∂–µ—Ä –ú–∞—Ä–∏—è", "health": 30, "targets": 660000, "fact": 0},
]

DEALS_DATA = [
    {
        "id": 1, "title": "–û–û–û –¢–µ—Ö—Ü–µ–Ω—Ç—Ä", "manager": "–ò–≤–∞–Ω", "amount": 250000,
        "stage": "agreement", "days_in_stage": 5, "probability": 85,
        "health_pos": ["–ú–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Å—Ç–∞—Ç—É—Å–µ –µ—â—ë 18 –¥–Ω–µ–π", "–ï—Å—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç"],
        "health_neg": []
    },
    {
        "id": 2, "title": "–ó–ê–û –ü—Ä–æ–º—Ç–æ—Ä–≥", "manager": "–ò—Ä–∏–Ω–∞", "amount": 450000,
        "stage": "presentation", "days_in_stage": 12, "probability": 45,
        "health_pos": [],
        "health_neg": ["–ó–∞–¥–∞—á–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ –Ω–∞ 2 –¥–Ω—è"]
    },
]

# =====================
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø SESSION
# =====================
if "selected_module" not in st.session_state:
    st.session_state["selected_module"] = "auto_load"
if "uploaded_calls" not in st.session_state:
    st.session_state["uploaded_calls"] = []
if "chat_history" not in st.session_state:
    st.session_state["chat_history"] = []
if "bitrix_calls" not in st.session_state:
    st.session_state["bitrix_calls"] = []

# =====================
# –ì–õ–ê–í–ù–´–ô UI
# =====================
def main():
    if not require_auth():
        st.stop()
    
    with st.sidebar:
        st.markdown("## üî• RUBI CHAT PRO v3.0")
        st.markdown("**–° –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–æ–π –∏–∑ Bitrix24**")
        st.markdown("---")
        
        # –°—Ç–∞—Ç—É—Å API
        st.markdown("### ‚úÖ –°—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π")
        col1, col2 = st.columns([1, 2])
        with col1:
            st.markdown("üîë OpenAI:")
        with col2:
            st.success("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω") if OPENAI_API_KEY else st.error("‚ùå –ù–µ—Ç")
        
        col1, col2 = st.columns([1, 2])
        with col1:
            st.markdown("üìä Bitrix24:")
        with col2:
            st.success("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω") if BITRIX24_WEBHOOK else st.error("‚ùå –ù–µ—Ç")
        
        st.markdown("---")
        
        # –í—ã–±–æ—Ä –º–æ–¥—É–ª—è
        st.markdown("### üìå –ú–æ–¥—É–ª–∏")
        module = st.radio(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å:",
            ["auto_load", "manual", "calls", "pulse", "assistant"],
            format_func=lambda x: {
                "auto_load": "üì• –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ Bitrix24",
                "manual": "üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Ä—É—á–Ω—É—é",
                "calls": "üìä –ò—Å—Ç–æ—Ä–∏—è –∑–≤–æ–Ω–∫–æ–≤",
                "pulse": "‚õµ –ü—É–ª—å—Å —Å–¥–µ–ª–æ–∫",
                "assistant": "ü§ñ AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç"
            }[x],
            key="module_select"
        )
        st.session_state["selected_module"] = module
        
        st.markdown("---")
        st.markdown("### üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        
        col1, col2 = st.columns(2)
        with col1:
            st.metric("üìû –í—Å–µ–≥–æ –∑–≤–æ–Ω–∫–æ–≤", len(st.session_state["uploaded_calls"]) + len(st.session_state["bitrix_calls"]))
        with col2:
            if st.session_state["uploaded_calls"] or st.session_state["bitrix_calls"]:
                all_calls = st.session_state["uploaded_calls"] + st.session_state["bitrix_calls"]
                avg_score = np.mean([c.get("quality", 10) for c in all_calls])
                st.metric("‚≠ê –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞", f"{avg_score:.1f}/20")
        
        st.markdown("---")
        if st.button("üö™ –í—ã—Ö–æ–¥", use_container_width=True):
            st.session_state[AUTH_KEY] = False
            st.rerun()
    
    # –û–°–ù–û–í–ù–û–ô –ö–û–ù–¢–ï–ù–¢
    if st.session_state["selected_module"] == "auto_load":
        show_auto_load_module()
    elif st.session_state["selected_module"] == "manual":
        show_manual_load_module()
    elif st.session_state["selected_module"] == "calls":
        show_calls_history_module()
    elif st.session_state["selected_module"] == "pulse":
        show_pulse_module()
    elif st.session_state["selected_module"] == "assistant":
        show_assistant_module()

def show_auto_load_module():
    """–ì–õ–ê–í–ù–´–ô –ú–û–î–£–õ–¨: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–≤–æ–Ω–∫–æ–≤ –∏–∑ Bitrix24"""
    st.markdown("# üì• –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–≤–æ–Ω–∫–æ–≤ –∏–∑ Bitrix24")
    
    if not BITRIX24_WEBHOOK:
        st.error("‚ùå Webhook Bitrix24 –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        st.info("–£—Å—Ç–∞–Ω–æ–≤–∏ BITRIX24_WEBHOOK –≤ —Ñ–∞–π–ª–µ .env")
        return
    
    col1, col2, col3 = st.columns([2, 1, 1])
    
    with col1:
        st.markdown("### üîÑ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∏ –∏–∑ CRM")
    
    with col2:
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", use_container_width=True):
            with st.spinner("‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–≤–æ–Ω–∫–∏ –∏–∑ Bitrix24..."):
                calls = get_calls_from_bitrix()
                st.session_state["bitrix_calls"] = calls
                st.success(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(calls)} –∑–≤–æ–Ω–∫–æ–≤")
                time.sleep(1)
                st.rerun()
    
    with col3:
        if st.button("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", use_container_width=True):
            st.session_state["show_settings"] = not st.session_state.get("show_settings", False)
    
    st.markdown("---")
    
    # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤
    if st.session_state["bitrix_calls"]:
        calls_to_show = st.session_state["bitrix_calls"][:20]
        
        st.markdown(f"### üìû –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {len(st.session_state['bitrix_calls'])} –∑–≤–æ–Ω–∫–æ–≤")
        
        calls_df = pd.DataFrame([
            {
                "üÜî ID": c.get("ID", "N/A")[:10],
                "üìå –¢–µ–º–∞": c.get("SUBJECT", "–ó–≤–æ–Ω–æ–∫"),
                "üìÖ –î–∞—Ç–∞": c.get("CREATED", "N/A"),
                "üë§ –¢–∏–ø": c.get("OWNER_TYPE_ID", "2"),
                "üìù –û–ø–∏—Å–∞–Ω–∏–µ": c.get("DESCRIPTION", "")[:30] + "..."
            }
            for c in calls_to_show
        ])
        
        st.dataframe(calls_df, use_container_width=True, hide_index=True)
        
        st.markdown("---")
        
        # –í—ã–±–æ—Ä –∑–≤–æ–Ω–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        st.markdown("### üéôÔ∏è –í—ã–±–µ—Ä–∏ –∑–≤–æ–Ω–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        
        selected_idx = st.selectbox(
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–≤–æ–Ω–∫–∏:",
            range(len(calls_to_show)),
            format_func=lambda i: f"–ó–≤–æ–Ω–æ–∫ {i+1} - {calls_to_show[i].get('SUBJECT', 'N/A')} ({calls_to_show[i].get('CREATED', 'N/A')})"
        )
        
        selected_call = calls_to_show[selected_idx]
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown(f"**ID –∑–≤–æ–Ω–∫–∞:** {selected_call.get('ID', 'N/A')}")
            st.markdown(f"**–¢–µ–º–∞:** {selected_call.get('SUBJECT', 'N/A')}")
        
        with col2:
            st.markdown(f"**–î–∞—Ç–∞:** {selected_call.get('CREATED', 'N/A')}")
            st.markdown(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {selected_call.get('DESCRIPTION', 'N/A')}")
        
        st.markdown("---")
        
        if st.button("üöÄ –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑ —ç—Ç–æ–≥–æ –∑–≤–æ–Ω–∫–∞", use_container_width=True, type="primary"):
            
            st.info("‚è≥ –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–¥–µ–ª–∫–µ...")
            deal_info = get_deal_info(selected_call.get("OWNER_ID", ""))
            
            st.markdown("### üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–¥–µ–ª–∫–µ")
            st.json(deal_info)
            
            st.info("‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–ø–∏—Å—å –∑–≤–æ–Ω–∫–∞...")
            record_url = get_call_recording_url(selected_call.get("ID", ""))
            
            if record_url:
                st.success(f"‚úÖ URL –∑–∞–ø–∏—Å–∏: {record_url[:50]}...")
                
                audio_data = download_call_recording(record_url)
                
                if audio_data:
                    st.success(f"‚úÖ –ó–∞–ø–∏—Å—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ ({len(audio_data) / 1024 / 1024:.2f} MB)")
                    
                    # –¢–†–ê–ù–°–ö–†–ò–ë–ê–¶–ò–Ø
                    st.markdown("---")
                    st.markdown("### üìù –≠—Ç–∞–ø 1: –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è")
                    
                    transcription = transcribe_audio_with_whisper(audio_data)
                    
                    if transcription:
                        st.text_area("–ü–æ–ª–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è:", transcription, height=150, disabled=True)
                        
                        st.markdown("---")
                        
                        # –ê–ù–ê–õ–ò–ó
                        st.markdown("### üéØ –≠—Ç–∞–ø 2: –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞")
                        
                        analysis = analyze_transcript_with_gpt(transcription)
                        
                        if analysis:
                            # –û—Ü–µ–Ω–∫–∏
                            col1, col2, col3, col4 = st.columns(4)
                            
                            with col1:
                                st.metric("üé§ –í–µ–∂–ª–∏–≤–æ—Å—Ç—å", f"{analysis.get('politeness', 0)}/5")
                            with col2:
                                st.metric("üëÇ –ü–æ–Ω–∏–º–∞–Ω–∏–µ", f"{analysis.get('understanding', 0)}/5")
                            with col3:
                                st.metric("üíº –†–µ—à–µ–Ω–∏–µ", f"{analysis.get('solution', 0)}/5")
                            with col4:
                                st.metric("‚úçÔ∏è –ó–∞–∫—Ä—ã—Ç–∏–µ", f"{analysis.get('closing', 0)}/5")
                            
                            st.markdown("---")
                            
                            # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
                            total = analysis.get("total_score", 0)
                            if total >= 18:
                                st.success(f"üü¢ –û—Ü–µ–Ω–∫–∞: {total}/20 (–û—Ç–ª–∏—á–Ω—ã–π –∑–≤–æ–Ω–æ–∫)")
                            elif total >= 14:
                                st.warning(f"üü° –û—Ü–µ–Ω–∫–∞: {total}/20 (–•–æ—Ä–æ—à–∏–π –∑–≤–æ–Ω–æ–∫)")
                            else:
                                st.error(f"üî¥ –û—Ü–µ–Ω–∫–∞: {total}/20 (–¢—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è)")
                            
                            st.markdown("---")
                            
                            # –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
                            col1, col2, col3 = st.columns(3)
                            with col1:
                                sentiment = analysis.get("sentiment", "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è")
                                emoji = {"–ü–æ–∑–∏—Ç–∏–≤–Ω–∞—è": "üòä", "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è": "üòê", "–ù–µ–≥–∞—Ç–∏–≤–Ω–∞—è": "üòû"}.get(sentiment, "‚ùì")
                                st.info(f"{emoji} **{sentiment}**")
                            
                            # –ö–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã
                            with col2:
                                st.markdown("#### üîë –ö–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã:")
                                for phrase in analysis.get("key_phrases", [])[:3]:
                                    st.markdown(f"- {phrase}")
                            
                            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                            with col3:
                                st.markdown("#### üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
                                for rec in analysis.get("recommendations", []):
                                    st.markdown(f"- {rec}")
                            
                            st.markdown("---")
                            
                            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ Bitrix24
                            if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –≤ Bitrix24", use_container_width=True, type="primary"):
                                success = save_analysis_to_bitrix(
                                    selected_call.get("OWNER_ID", ""),
                                    {
                                        "total_score": total,
                                        "scores": {
                                            "politeness": analysis.get("politeness", 0),
                                            "understanding": analysis.get("understanding", 0),
                                            "solution": analysis.get("solution", 0),
                                            "closing": analysis.get("closing", 0)
                                        },
                                        "sentiment": sentiment,
                                        "key_phrases": analysis.get("key_phrases", []),
                                        "recommendations": analysis.get("recommendations", [])
                                    }
                                )
                                
                                if success:
                                    st.success("‚úÖ –ê–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ Bitrix24!")
                                
                                # –î–æ–±–∞–≤–∏—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏—é
                                call_record = {
                                    "id": len(st.session_state["uploaded_calls"]) + 1,
                                    "file": selected_call.get("ID", ""),
                                    "manager": "–ò–∑ Bitrix24",
                                    "client": deal_info.get("TITLE", "N/A"),
                                    "date": selected_call.get("CREATED", ""),
                                    "quality": total,
                                    "sentiment": sentiment,
                                    "transcription": transcription,
                                    "scores": {
                                        "politeness": analysis.get("politeness", 0),
                                        "understanding": analysis.get("understanding", 0),
                                        "solution": analysis.get("solution", 0),
                                        "closing": analysis.get("closing", 0)
                                    }
                                }
                                
                                st.session_state["uploaded_calls"].append(call_record)
                else:
                    st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–ø–∏—Å—å")
            else:
                st.warning("‚ö†Ô∏è URL –∑–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Bitrix24")
    else:
        st.info("üì≠ –ó–≤–æ–Ω–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫'")

def show_manual_load_module():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Ä—É—á–Ω—É—é"""
    st.markdown("# üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∑–≤–æ–Ω–æ–∫ –≤—Ä—É—á–Ω—É—é")
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        uploaded_file = st.file_uploader(
            "–í—ã–±–µ—Ä–∏—Ç–µ MP3, WAV, OGG –∏–ª–∏ M4A —Ñ–∞–π–ª",
            type=["mp3", "wav", "ogg", "m4a"]
        )
    
    with col2:
        manager_select = st.selectbox(
            "–ú–µ–Ω–µ–¥–∂–µ—Ä:",
            [m["name"] for m in MANAGERS_DATA]
        )
    
    if uploaded_file is not None:
        st.success(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {uploaded_file.name}")
        
        client_name = st.text_input("–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ / –ö–æ–º–ø–∞–Ω–∏—è:", "–û–û–û –ö–ª–∏–µ–Ω—Ç")
        call_date = st.date_input("–î–∞—Ç–∞ –∑–≤–æ–Ω–∫–∞:", datetime.now())
        
        if st.button("üöÄ –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑", use_container_width=True, type="primary"):
            audio_data = uploaded_file.read()
            
            transcription = transcribe_audio_with_whisper(audio_data)
            
            if transcription:
                st.text_area("–ü–æ–ª–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è:", transcription, height=150, disabled=True)
                
                st.markdown("---")
                
                analysis = analyze_transcript_with_gpt(transcription)
                
                if analysis:
                    total = analysis.get("total_score", 0)
                    
                    col1, col2, col3, col4 = st.columns(4)
                    with col1:
                        st.metric("üé§ –í–µ–∂–ª–∏–≤–æ—Å—Ç—å", f"{analysis.get('politeness', 0)}/5")
                    with col2:
                        st.metric("üëÇ –ü–æ–Ω–∏–º–∞–Ω–∏–µ", f"{analysis.get('understanding', 0)}/5")
                    with col3:
                        st.metric("üíº –†–µ—à–µ–Ω–∏–µ", f"{analysis.get('solution', 0)}/5")
                    with col4:
                        st.metric("‚úçÔ∏è –ó–∞–∫—Ä—ã—Ç–∏–µ", f"{analysis.get('closing', 0)}/5")
                    
                    st.markdown("---")
                    
                    if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑", use_container_width=True, type="primary"):
                        call_record = {
                            "id": len(st.session_state["uploaded_calls"]) + 1,
                            "file": uploaded_file.name,
                            "manager": manager_select,
                            "client": client_name,
                            "date": call_date.strftime("%Y-%m-%d"),
                            "quality": total,
                            "sentiment": analysis.get("sentiment", "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è"),
                            "transcription": transcription,
                            "scores": {
                                "politeness": analysis.get("politeness", 0),
                                "understanding": analysis.get("understanding", 0),
                                "solution": analysis.get("solution", 0),
                                "closing": analysis.get("closing", 0)
                            }
                        }
                        
                        st.session_state["uploaded_calls"].append(call_record)
                        st.success("‚úÖ –ê–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")

def show_calls_history_module():
    """–ò—Å—Ç–æ—Ä–∏—è –∑–≤–æ–Ω–∫–æ–≤"""
    st.markdown("# üìä –ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤")
    
    all_calls = st.session_state["uploaded_calls"] + st.session_state["bitrix_calls"]
    
    if all_calls:
        calls_df = pd.DataFrame([
            {
                "üéôÔ∏è –ò—Å—Ç–æ—á–Ω–∏–∫": "–†—É—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞" if c in st.session_state["uploaded_calls"] else "Bitrix24",
                "üë§ –ú–µ–Ω–µ–¥–∂–µ—Ä": c.get("manager", "N/A"),
                "üè¢ –ö–ª–∏–µ–Ω—Ç": c.get("client", "N/A")[:20],
                "üìÖ –î–∞—Ç–∞": c.get("date", "N/A"),
                "‚≠ê –û—Ü–µ–Ω–∫–∞": f"{c.get('quality', 0)}/20",
                "üòä –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å": c.get("sentiment", "N/A")
            }
            for c in all_calls
        ])
        
        st.dataframe(calls_df, use_container_width=True, hide_index=True)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        st.markdown("---")
        st.markdown("### üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        
        avg_score = np.mean([c.get("quality", 10) for c in all_calls])
        positive_count = sum(1 for c in all_calls if "–ü–æ–∑–∏—Ç–∏–≤–Ω–∞—è" in c.get("sentiment", ""))
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("‚≠ê –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞", f"{avg_score:.1f}/20")
        with col2:
            st.metric("üòä –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ", f"{positive_count}/{len(all_calls)}")
        with col3:
            st.metric("üìû –í—Å–µ–≥–æ –∑–≤–æ–Ω–∫–æ–≤", len(all_calls))
    else:
        st.info("üì≠ –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞")

def show_pulse_module():
    """–ü—É–ª—å—Å —Å–¥–µ–ª–æ–∫"""
    st.markdown("# ‚õµ –ü—É–ª—å—Å —Å–¥–µ–ª–æ–∫")
    
    for deal in DEALS_DATA:
        with st.container(border=True):
            col1, col2, col3 = st.columns([2, 1, 1])
            
            with col1:
                st.markdown(f"### üíº {deal['title']}")
                st.markdown(f"**–ú–µ–Ω–µ–¥–∂–µ—Ä:** {deal['manager']} | **–°—É–º–º–∞:** {deal['amount']:,} ‚ÇΩ".replace(",", " "))
            
            with col2:
                st.markdown(f"**–°—Ç–∞–¥–∏—è:** {deal['stage']}")
                st.markdown(f"**–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å:** {deal['probability']}%")
            
            with col3:
                if deal['probability'] > 70:
                    st.success(f"‚úÖ –ó–¥–æ—Ä–æ–≤—å–µ: {deal['days_in_stage']} –¥–Ω–µ–π")
                else:
                    st.warning(f"‚ö†Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {deal['days_in_stage']} –¥–Ω–µ–π")

def show_assistant_module():
    """AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç"""
    st.markdown("# ü§ñ AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç")
    
    for message in st.session_state["chat_history"]:
        if message["role"] == "user":
            with st.chat_message("user"):
                st.markdown(message["content"])
        else:
            with st.chat_message("assistant"):
                st.markdown(message["content"])
    
    user_input = st.chat_input("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∑–∞–¥–∞—á—É...")
    
    if user_input:
        st.session_state["chat_history"].append({"role": "user", "content": user_input})
        
        with st.chat_message("assistant"):
            with st.spinner("‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞..."):
                try:
                    response = client.chat.completions.create(
                        model="gpt-4",
                        messages=[{"role": "user", "content": user_input}],
                        temperature=0.7,
                        max_tokens=1000
                    )
                    
                    response_text = response.choices[0].message.content
                    st.markdown(response_text)
                    
                    st.session_state["chat_history"].append({"role": "assistant", "content": response_text})
                    
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

if __name__ == "__main__":
    main()
