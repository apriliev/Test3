# -*- coding: utf-8 -*-
"""
RUBI CHAT PRO v1.0
–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–æ–≥ RUBI Chat —Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–µ–π –∑–≤–æ–Ω–∫–æ–≤
–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ AI –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª–æ–º –ø—Ä–æ–¥–∞–∂ —Å –∞–Ω–∞–ª–∏–∑–æ–º –∫–∞—á–µ—Å—Ç–≤–∞ –∑–≤–æ–Ω–∫–æ–≤
"""

import os
import json
import time
from datetime import datetime, timedelta, date
from pathlib import Path
import base64
import io

import numpy as np
import pandas as pd
import streamlit as st
import requests

try:
    import plotly.express as px
    import plotly.graph_objects as go
except ImportError:
    px = None
    go = None

# =====================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
# =====================
st.set_page_config(
    page_title="RUBI CHAT PRO",
    page_icon="üî•",
    layout="wide",
    initial_sidebar_state="expanded"
)

# =====================
# –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø
# =====================
AUTH_KEY = "rubi_chat_pro_auth"

def require_auth():
    if AUTH_KEY not in st.session_state:
        st.session_state[AUTH_KEY] = False
    
    if st.session_state[AUTH_KEY]:
        return True
    
    # Login page
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        st.markdown("### üîê –í—Ö–æ–¥ –≤ RUBI CHAT PRO")
        with st.form("login_form", clear_on_submit=False):
            login = st.text_input("–õ–æ–≥–∏–Ω", value="")
            password = st.text_input("–ü–∞—Ä–æ–ª—å", value="", type="password")
            submitted = st.form_submit_button("–í–æ–π—Ç–∏", use_container_width=True)
            
            if submitted:
                if login == "admin" and password == "admin":
                    st.session_state[AUTH_KEY] = True
                    st.rerun()
                else:
                    st.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
    
    return False

# =====================
# MOCK –î–ê–ù–ù–´–ï
# =====================
MANAGERS_DATA = [
    {"id": 1, "name": "–ú–µ–Ω–µ–¥–∂–µ—Ä –ò–≤–∞–Ω", "health": 89, "status": "potential", "targets": 1000000, "fact": 850000},
    {"id": 2, "name": "–ú–µ–Ω–µ–¥–∂–µ—Ä –ò—Ä–∏–Ω–∞", "health": 65, "status": "cold", "targets": 1000000, "fact": 580000},
    {"id": 3, "name": "–ú–µ–Ω–µ–¥–∂–µ—Ä –ê—Ä—Ç–µ–º", "health": 74, "status": "potential", "targets": 900000, "fact": 430000},
    {"id": 4, "name": "–ú–µ–Ω–µ–¥–∂–µ—Ä –ú–∞—Ä–∏—è", "health": 30, "status": "optimism", "targets": 660000, "fact": 0},
]

DEALS_DATA = [
    {
        "id": 1, "title": "–û–û–û –¢–µ—Ö—Ü–µ–Ω—Ç—Ä", "manager": "–ò–≤–∞–Ω", "amount": 250000,
        "stage": "agreement", "days_in_stage": 5, "probability": 85,
        "health_pos": ["–ú–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Å—Ç–∞—Ç—É—Å–µ –µ—â—ë 18 –¥–Ω–µ–π", "–ï—Å—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç"],
        "health_neg": []
    },
    {
        "id": 2, "title": "–ó–ê–û –ü—Ä–æ–º—Ç–æ—Ä–≥", "manager": "–ò—Ä–∏–Ω–∞", "amount": 450000,
        "stage": "presentation", "days_in_stage": 12, "probability": 45,
        "health_pos": [],
        "health_neg": ["–ó–∞–¥–∞—á–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ –Ω–∞ 2 –¥–Ω—è", "–ù–µ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ"]
    },
    {
        "id": 3, "title": "–ò–ü –°—Ç—Ä–æ–π—Å–µ—Ä–≤–∏—Å", "manager": "–ê—Ä—Ç–µ–º", "amount": 180000,
        "stage": "tender", "days_in_stage": 7, "probability": 60,
        "health_pos": ["–ï—Å—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç"],
        "health_neg": ["–ó–∞–¥–∞—á–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ –Ω–∞ 5 –¥–Ω–µ–π"]
    },
]

CALLS_DATA = [
    {
        "id": 1, "file": "call_001.mp3", "manager": "–ò–≤–∞–Ω", "date": "2025-10-31",
        "duration": "12:45", "quality": 18, "sentiment": "positive",
        "transcription": "–ú–µ–Ω–µ–¥–∂–µ—Ä: –î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ú–µ–Ω–µ–¥–∂–µ—Ä –†–£–ë–ò –ß–ê–¢. –ö–∞–∫ –¥–µ–ª–∞? –ö–ª–∏–µ–Ω—Ç: –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. –ú–µ–Ω–µ–¥–∂–µ—Ä: –ó–≤–æ–Ω—é –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É...",
        "scores": {"politeness": 5, "understanding": 5, "solution": 4, "closing": 4}
    },
]

# =====================
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø SESSION
# =====================
if "selected_module" not in st.session_state:
    st.session_state["selected_module"] = "results"
if "uploaded_calls" not in st.session_state:
    st.session_state["uploaded_calls"] = CALLS_DATA.copy()
if "selected_manager_filter" not in st.session_state:
    st.session_state["selected_manager_filter"] = "–í—Å–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã"
if "selected_period" not in st.session_state:
    st.session_state["selected_period"] = "–ú–µ—Å—è—Ü"
if "chat_history" not in st.session_state:
    st.session_state["chat_history"] = []

# =====================
# –§–£–ù–ö–¶–ò–ò –ê–ù–ê–õ–ò–ó–ê
# =====================
def analyze_call_quality(transcription: str) -> dict:
    """–°–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∑–≤–æ–Ω–∫–∞ —Å –ø–æ–º–æ—â—å—é AI"""
    # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ –∫ API (OpenAI Whisper, AssemblyAI, Google Speech-to-Text)
    
    transcription_lower = transcription.lower()
    
    # –≠–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫
    politeness_score = 4 if "—Å–ø–∞—Å–∏–±–æ" in transcription_lower or "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞" in transcription_lower else 3
    understanding_score = 4 if "–ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å" in transcription_lower or "–ø—Ä–æ–±–ª–µ–º" in transcription_lower else 3
    solution_score = 3 if "—Ä–µ—à–µ–Ω–∏–µ" in transcription_lower or "–ø—Ä–µ–¥–ª–∞–≥" in transcription_lower else 2
    closing_score = 3 if "—Å–æ–≥–ª–∞—Å–∏" in transcription_lower or "–¥–æ–≥–æ–≤–æ—Ä" in transcription_lower else 2
    
    total_score = politeness_score + understanding_score + solution_score + closing_score
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    positive_words = ["—Ö–æ—Ä–æ—à–æ", "–æ—Ç–ª–∏—á–Ω–æ", "—Å–ø–∞—Å–∏–±–æ", "—Å–æ–≥–ª–∞—Å–µ–Ω", "–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ", "–Ω—Ä–∞–≤–∏—Ç—Å—è"]
    negative_words = ["–ø—Ä–æ–±–ª–µ–º", "—Å–ª–æ–∂–Ω–æ", "–Ω–µ", "–Ω–µ–ª—å–∑—è", "—Å–∫—É—á–Ω–æ", "–ø–ª–æ—Ö–æ"]
    
    pos_count = sum(1 for word in positive_words if word in transcription_lower)
    neg_count = sum(1 for word in negative_words if word in transcription_lower)
    
    if pos_count > neg_count:
        sentiment = "positive"
    elif neg_count > pos_count:
        sentiment = "negative"
    else:
        sentiment = "neutral"
    
    return {
        "total_score": total_score,
        "politeness": politeness_score,
        "understanding": understanding_score,
        "solution": solution_score,
        "closing": closing_score,
        "sentiment": sentiment
    }

def extract_key_phrases(text: str) -> list:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ñ—Ä–∞–∑ –∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏"""
    phrases = [
        "–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å", "–≤–æ—Ä–æ–Ω–∫–∞ –ø—Ä–æ–¥–∞–∂", "80% –≤—Ä–µ–º–µ–Ω–∏", "–∞–Ω–∞–ª–∏–∑ CRM",
        "–º–µ–Ω–µ–¥–∂–µ—Ä", "–∞—É–¥–∏—Ç", "–ø—Ä–æ–≥–Ω–æ–∑", "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", "KPI", "—Å–¥–µ–ª–∫–∏"
    ]
    found = [p for p in phrases if p in text.lower()]
    return found[:5]

def identify_speakers(text: str) -> list:
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ø–∏–∫–µ—Ä–æ–≤ (–ú–µ–Ω–µ–¥–∂–µ—Ä/–ö–ª–∏–µ–Ω—Ç)"""
    lines = text.split(".")
    speakers = []
    for line in lines:
        if "–ú–µ–Ω–µ–¥–∂–µ—Ä:" in line:
            speakers.append({"speaker": "–ú–µ–Ω–µ–¥–∂–µ—Ä", "text": line.replace("–ú–µ–Ω–µ–¥–∂–µ—Ä:", "").strip()})
        elif "–ö–ª–∏–µ–Ω—Ç:" in line:
            speakers.append({"speaker": "–ö–ª–∏–µ–Ω—Ç", "text": line.replace("–ö–ª–∏–µ–Ω—Ç:", "").strip()})
    return speakers

# =====================
# –ì–õ–ê–í–ù–´–ô UI
# =====================
def main():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    if not require_auth():
        st.stop()
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    with st.sidebar:
        st.markdown("## üéØ RUBI CHAT PRO")
        st.markdown("---")
        
        # –í—ã–±–æ—Ä –º–æ–¥—É–ª—è
        st.markdown("### üìå –ú–æ–¥—É–ª–∏")
        module = st.radio(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å:",
            ["results", "audit", "calls", "pulse", "assistant"],
            format_func=lambda x: {
                "results": "üöÄ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –û–ü",
                "audit": "üîç –ê—É–¥–∏—Ç –≤–æ—Ä–æ–Ω–∫–∏",
                "calls": "‚òî –û—Ü–µ–Ω–∫–∞ –∑–≤–æ–Ω–∫–æ–≤",
                "pulse": "‚õµ –ü—É–ª—å—Å —Å–¥–µ–ª–æ–∫",
                "assistant": "ü§ñ AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç"
            }[x],
            key="module_select"
        )
        st.session_state["selected_module"] = module
        
        st.markdown("---")
        st.markdown("### ‚öôÔ∏è –§–∏–ª—å—Ç—Ä—ã")
        
        # –§–∏–ª—å—Ç—Ä—ã
        manager_filter = st.selectbox(
            "–ú–µ–Ω–µ–¥–∂–µ—Ä:",
            ["–í—Å–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã"] + [m["name"] for m in MANAGERS_DATA],
            key="manager_filter"
        )
        st.session_state["selected_manager_filter"] = manager_filter
        
        period = st.selectbox(
            "–ü–µ—Ä–∏–æ–¥:",
            ["–î–µ–Ω—å", "–ù–µ–¥–µ–ª—è", "–ú–µ—Å—è—Ü", "–ö–≤–∞—Ä—Ç–∞–ª", "–ì–æ–¥"],
            key="period_select"
        )
        st.session_state["selected_period"] = period
        
        st.markdown("---")
        st.markdown("### üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        
        col1, col2 = st.columns(2)
        with col1:
            st.metric("–ú–µ–Ω–µ–¥–∂–µ—Ä–æ–≤", len(MANAGERS_DATA))
        with col2:
            st.metric("–°–¥–µ–ª–æ–∫", len(DEALS_DATA))
        
        st.markdown("---")
        if st.button("üö™ –í—ã—Ö–æ–¥", use_container_width=True):
            st.session_state[AUTH_KEY] = False
            st.rerun()
    
    # –û–°–ù–û–í–ù–û–ô –ö–û–ù–¢–ï–ù–¢
    if st.session_state["selected_module"] == "results":
        show_results_module()
    elif st.session_state["selected_module"] == "audit":
        show_audit_module()
    elif st.session_state["selected_module"] == "calls":
        show_calls_module()
    elif st.session_state["selected_module"] == "pulse":
        show_pulse_module()
    elif st.session_state["selected_module"] == "assistant":
        show_assistant_module()

def show_results_module():
    """–ú–æ–¥—É–ª—å '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –û–ü'"""
    st.markdown("# üöÄ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–¥–µ–ª–∞ –ø—Ä–æ–¥–∞–∂")
    
    # KPI –≤ –Ω–∞—á–∞–ª–µ
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("–ü–ª–∞–Ω", "3,560,000 ‚ÇΩ", delta=None)
    with col2:
        st.metric("–§–∞–∫—Ç", "1,860,000 ‚ÇΩ", delta="-1,700,000", delta_color="inverse")
    with col3:
        st.metric("–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª", "1,250,000 ‚ÇΩ", delta=None)
    with col4:
        st.metric("% –ü–ª–∞–Ω–∞", "52%", delta="-28%", delta_color="inverse")
    
    st.markdown("---")
    
    # –¢–∞–±–ª–∏—Ü–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    st.markdown("### üë• –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤")
    
    managers_df = pd.DataFrame([
        {
            "üë§ –ú–µ–Ω–µ–¥–∂–µ—Ä": m["name"],
            "–ó–¥–æ—Ä–æ–≤—å–µ": f"{m['health']}%",
            "–¶–µ–ª—å": f"{m['targets']:,} ‚ÇΩ".replace(",", " "),
            "–§–∞–∫—Ç": f"{m['fact']:,} ‚ÇΩ".replace(",", " "),
            "% –í—ã–ø–æ–ª–Ω–µ–Ω–∏—è": f"{int((m['fact']/m['targets'])*100)}%"
        }
        for m in MANAGERS_DATA
    ])
    
    st.dataframe(managers_df, use_container_width=True, hide_index=True)
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    st.markdown("### üìà –î–∏–Ω–∞–º–∏–∫–∞ –ø–æ –¥–Ω—è–º")
    
    dates = pd.date_range(end=datetime.now(), periods=30, freq='D')
    values = np.random.randint(1000000, 2000000, 30)
    
    df_chart = pd.DataFrame({"–î–∞—Ç–∞": dates, "–í—ã—Ä—É—á–∫–∞": values})
    
    if px:
        fig = px.area(df_chart, x="–î–∞—Ç–∞", y="–í—ã—Ä—É—á–∫–∞", title="–î–∏–Ω–∞–º–∏–∫–∞ –≤—ã—Ä—É—á–∫–∏")
        fig.update_layout(hovermode='x unified')
        st.plotly_chart(fig, use_container_width=True)
    else:
        st.line_chart(df_chart.set_index("–î–∞—Ç–∞"))
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–¥–µ–ª–∫–∞–º
    st.markdown("### üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–¥–µ–ª–∫–∞–º")
    
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("–°–¥–µ–ª–æ–∫ –±–µ–∑ –∑–∞–¥–∞—á", "38", delta=None)
    with col2:
        st.metric("–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏", "46", delta=None)
    with col3:
        st.metric("–ó–∞—Å—Ç—Ä—è–≤—à–∏–µ —Å–¥–µ–ª–∫–∏", "0", delta=None)
    with col4:
        st.metric("–ü–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏", "29", delta=None)

def show_audit_module():
    """–ú–æ–¥—É–ª—å '–ê—É–¥–∏—Ç –≤–æ—Ä–æ–Ω–∫–∏'"""
    st.markdown("# üîç –ê—É–¥–∏—Ç –≤–æ—Ä–æ–Ω–∫–∏")
    
    # –§–∏–ª—å—Ç—Ä—ã
    col1, col2 = st.columns(2)
    
    with col1:
        stage_filter = st.multiselect(
            "–°—Ç–∞–¥–∏–∏ —Å–¥–µ–ª–æ–∫:",
            ["agreement", "presentation", "tender", "lost"],
            default=["agreement", "presentation", "tender"]
        )
    
    with col2:
        prob_range = st.slider("–î–∏–∞–ø–∞–∑–æ–Ω –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏:", 0, 100, (0, 100))
    
    # –¢–∞–±–ª–∏—Ü–∞ —Å–¥–µ–ª–æ–∫
    deals_filtered = [d for d in DEALS_DATA if d["stage"] in stage_filter and prob_range[0] <= d["probability"] <= prob_range[1]]
    
    deals_df = pd.DataFrame([
        {
            "–°–¥–µ–ª–∫–∞": d["title"],
            "–ú–µ–Ω–µ–¥–∂–µ—Ä": d["manager"],
            "–°—É–º–º–∞": f"{d['amount']:,} ‚ÇΩ".replace(",", " "),
            "–°—Ç–∞–¥–∏—è": d["stage"],
            "–î–Ω–µ–π –Ω–∞ —Å—Ç–∞–¥–∏–∏": d["days_in_stage"],
            "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å": f"{d['probability']}%",
            "–ó–¥–æ—Ä–æ–≤—å–µ": "‚úÖ" if len(d["health_pos"]) > len(d["health_neg"]) else "‚ö†Ô∏è" if len(d["health_neg"]) > 0 else "‚ùå"
        }
        for d in deals_filtered
    ])
    
    st.dataframe(deals_df, use_container_width=True, hide_index=True)
    
    # –î–µ—Ç–∞–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–¥–µ–ª–∫–∏
    st.markdown("### üìã –î–µ—Ç–∞–ª–∏ —Å–¥–µ–ª–∫–∏")
    
    if deals_filtered:
        selected_deal = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å–¥–µ–ª–∫—É:", [d["title"] for d in deals_filtered])
        deal = [d for d in deals_filtered if d["title"] == selected_deal][0]
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.markdown(f"**–ú–µ–Ω–µ–¥–∂–µ—Ä:** {deal['manager']}")
            st.markdown(f"**–°—É–º–º–∞:** {deal['amount']:,} ‚ÇΩ".replace(",", " "))
        
        with col2:
            st.markdown(f"**–°—Ç–∞–¥–∏—è:** {deal['stage']}")
            st.markdown(f"**–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å:** {deal['probability']}%")
        
        with col3:
            st.markdown(f"**–î–Ω–µ–π –Ω–∞ —Å—Ç–∞–¥–∏–∏:** {deal['days_in_stage']}")
            st.markdown(f"**–ó–¥–æ—Ä–æ–≤—å–µ:** {'‚úÖ –•–æ—Ä–æ—à–µ–µ' if len(deal['health_pos']) > 0 else '‚ùå –ü–ª–æ—Ö–æ–µ'}")
        
        st.markdown("#### ‚úÖ –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã")
        for factor in deal["health_pos"]:
            st.markdown(f"- ‚úì {factor}")
        
        st.markdown("#### ‚ö†Ô∏è –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã")
        for factor in deal["health_neg"]:
            st.markdown(f"- ‚úó {factor}")

def show_calls_module():
    """–ú–æ–¥—É–ª—å '–û—Ü–µ–Ω–∫–∞ –∑–≤–æ–Ω–∫–æ–≤' - –ì–õ–ê–í–ù–´–ô –ù–û–í–´–ô –ú–û–î–£–õ–¨"""
    st.markdown("# ‚òî –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∑–≤–æ–Ω–∫–æ–≤")
    
    tabs = st.tabs(["üìÅ –ó–∞–≥—Ä—É–∑–∫–∞", "üìä –ò—Å—Ç–æ—Ä–∏—è", "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"])
    
    with tabs[0]:
        st.markdown("## –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –∑–≤–æ–Ω–∫–æ–≤")
        
        col1, col2 = st.columns([2, 1])
        
        with col1:
            st.markdown("### üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª")
            uploaded_file = st.file_uploader(
                "–í—ã–±–µ—Ä–∏—Ç–µ MP3 –∏–ª–∏ WAV —Ñ–∞–π–ª",
                type=["mp3", "wav", "ogg", "m4a"]
            )
        
        with col2:
            manager_select = st.selectbox(
                "–ú–µ–Ω–µ–¥–∂–µ—Ä:",
                [m["name"] for m in MANAGERS_DATA]
            )
        
        if uploaded_file is not None:
            st.success(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {uploaded_file.name}")
            
            col1, col2 = st.columns(2)
            with col1:
                duration = st.text_input("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω:—Å–µ–∫):", "12:45")
            with col2:
                client_name = st.text_input("–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞:", "–û–û–û –ö–ª–∏–µ–Ω—Ç")
            
            st.markdown("---")
            
            # –¢–†–ê–ù–°–ö–†–ò–ë–ê–¶–ò–Ø
            st.markdown("### üéôÔ∏è –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–≤–æ–Ω–∫–∞")
            
            with st.spinner("‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è..."):
                time.sleep(2)  # –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                
                transcription = "–ú–µ–Ω–µ–¥–∂–µ—Ä: –î–æ–±—Ä—ã–π –¥–µ–Ω—å! –≠—Ç–æ –∫–æ–º–ø–∞–Ω–∏—è –†–£–ë–ò –ß–ê–¢. –ö–∞–∫ –¥–µ–ª–∞? –ö–ª–∏–µ–Ω—Ç: –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —Å–ø–∞—Å–∏–±–æ, –≤—Å—ë —Ö–æ—Ä–æ—à–æ. –ú–µ–Ω–µ–¥–∂–µ—Ä: –Ø –∑–≤–æ–Ω—é –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –æ –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂–∞–º–∏. –ö–ª–∏–µ–Ω—Ç: –î–∞, –º–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ. –ú–µ–Ω–µ–¥–∂–µ—Ä: –ù–∞—à AI-—Å–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å –≤–∞—à–µ–π –≤–æ—Ä–æ–Ω–∫–∏ –ø—Ä–æ–¥–∞–∂, —ç–∫–æ–Ω–æ–º–∏—Ç 80% –≤—Ä–µ–º–µ–Ω–∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –Ω–∞ –∞–Ω–∞–ª–∏–∑ CRM. –ö–ª–∏–µ–Ω—Ç: –≠—Ç–æ –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ. –ú–µ–Ω–µ–¥–∂–µ—Ä: –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —Å Bitrix24 –∏ AmoCRM. –ö–ª–∏–µ–Ω—Ç: –£ –Ω–∞—Å –µ—Å—Ç—å Bitrix24. –ú–µ–Ω–µ–¥–∂–µ—Ä: –û—Ç–ª–∏—á–Ω–æ! –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∑–∞–π–º–µ—Ç –æ–¥–∏–Ω –¥–µ–Ω—å. –ö–ª–∏–µ–Ω—Ç: –ê —Å—Ç–æ–∏–º–æ—Å—Ç—å? –ú–µ–Ω–µ–¥–∂–µ—Ä: –û—Ç 50 —Ç—ã—Å—è—á –≤ –º–µ—Å—è—Ü –∑–∞ —Ç—Ä–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ö–ª–∏–µ–Ω—Ç: –ú–æ–∂–Ω–æ –Ω–∞–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ? –ú–µ–Ω–µ–¥–∂–µ—Ä: –ö–æ–Ω–µ—á–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—é –ö–ü —Å–µ–≥–æ–¥–Ω—è –∂–µ."
                
                st.text_area(
                    "–ü–æ–ª–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è:",
                    transcription,
                    height=150,
                    disabled=True
                )
            
            st.markdown("---")
            
            # –ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê
            st.markdown("### üéØ –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∑–≤–æ–Ω–∫–∞")
            
            analysis = analyze_call_quality(transcription)
            
            col1, col2, col3, col4, col5 = st.columns(5)
            
            with col1:
                st.metric("–í–µ–∂–ª–∏–≤–æ—Å—Ç—å", f"{analysis['politeness']}/5")
            with col2:
                st.metric("–ü–æ–Ω–∏–º–∞–Ω–∏–µ", f"{analysis['understanding']}/5")
            with col3:
                st.metric("–†–µ—à–µ–Ω–∏–µ", f"{analysis['solution']}/5")
            with col4:
                st.metric("–ó–∞–∫—Ä—ã—Ç–∏–µ", f"{analysis['closing']}/5")
            with col5:
                st.metric("–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞", f"{analysis['total_score']}/20")
            
            st.markdown("---")
            
            # –¢–û–ù–ê–õ–¨–ù–û–°–¢–¨
            col1, col2, col3 = st.columns(3)
            
            with col1:
                sentiment_emoji = {"positive": "üòä", "neutral": "üòê", "negative": "üòû"}[analysis["sentiment"]]
                sentiment_text = {"positive": "–ü–æ–∑–∏—Ç–∏–≤–Ω–∞—è", "neutral": "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è", "negative": "–ù–µ–≥–∞—Ç–∏–≤–Ω–∞—è"}[analysis["sentiment"]]
                st.metric("–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å", f"{sentiment_emoji} {sentiment_text}")
            
            # –°–ü–ò–ö–ï–†–´
            st.markdown("### üë• –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ø–∏–∫–µ—Ä–æ–≤")
            
            speakers = identify_speakers(transcription)
            
            for speaker in speakers[:5]:
                if speaker["speaker"] == "–ú–µ–Ω–µ–¥–∂–µ—Ä":
                    st.markdown(f"**üé§ –ú–µ–Ω–µ–¥–∂–µ—Ä:** {speaker['text']}")
                else:
                    st.markdown(f"**üë§ –ö–ª–∏–µ–Ω—Ç:** {speaker['text']}")
            
            st.markdown("---")
            
            # –ö–õ–Æ–ß–ï–í–´–ï –§–†–ê–ó–´
            st.markdown("### üîë –ö–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã")
            
            key_phrases = extract_key_phrases(transcription)
            
            cols = st.columns(len(key_phrases))
            for idx, phrase in enumerate(key_phrases):
                with cols[idx]:
                    st.info(f"üìå {phrase}")
            
            st.markdown("---")
            
            # –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò
            st.markdown("### üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é")
            
            recommendations = []
            
            if analysis["politeness"] < 4:
                recommendations.append("üé§ –£–≤–µ–ª–∏—á–∏—Ç—å –≤–µ–∂–ª–∏–≤–æ—Å—Ç—å –∏ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç—É")
            if analysis["understanding"] < 4:
                recommendations.append("üëÇ –õ—É—á—à–µ —Å–ª—É—à–∞—Ç—å –∏ –≤—ã—è—Å–Ω—è—Ç—å –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞")
            if analysis["solution"] < 4:
                recommendations.append("üíº –ß–µ—Ç—á–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—Ç—å —Ä–µ—à–µ–Ω–∏–µ –∏ –µ–≥–æ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞")
            if analysis["closing"] < 4:
                recommendations.append("‚úçÔ∏è –ë–æ–ª–µ–µ –∞–∫—Ç–∏–≤–Ω–æ –∑–∞–∫—Ä—ã–≤–∞—Ç—å —Å–¥–µ–ª–∫—É, –ø—Ä–µ–¥–ª–∞–≥–∞—è –ö–ü")
            
            if analysis["sentiment"] == "negative":
                recommendations.append("‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ–≤–æ–ª–µ–Ω - —Å—Ä–æ—á–Ω–æ —Å–≤—è–∂–∏—Ç–µ—Å—å –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è")
            
            for rec in recommendations:
                st.warning(rec)
            
            st.markdown("---")
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞
            if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑", use_container_width=True):
                new_call = {
                    "id": len(st.session_state["uploaded_calls"]) + 1,
                    "file": uploaded_file.name,
                    "manager": manager_select,
                    "date": datetime.now().strftime("%Y-%m-%d"),
                    "duration": duration,
                    "quality": analysis["total_score"],
                    "sentiment": analysis["sentiment"],
                    "transcription": transcription,
                    "scores": {
                        "politeness": analysis["politeness"],
                        "understanding": analysis["understanding"],
                        "solution": analysis["solution"],
                        "closing": analysis["closing"]
                    }
                }
                
                st.session_state["uploaded_calls"].append(new_call)
                st.success("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–≤–æ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
    
    with tabs[1]:
        st.markdown("## üìä –ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤")
        
        if st.session_state["uploaded_calls"]:
            calls_df = pd.DataFrame([
                {
                    "üéôÔ∏è –§–∞–π–ª": c["file"],
                    "üë§ –ú–µ–Ω–µ–¥–∂–µ—Ä": c["manager"],
                    "üìÖ –î–∞—Ç–∞": c["date"],
                    "‚è±Ô∏è –î–ª–∏—Ç.": c["duration"],
                    "‚≠ê –û—Ü–µ–Ω–∫–∞": f"{c['quality']}/20",
                    "üòä –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å": c["sentiment"]
                }
                for c in st.session_state["uploaded_calls"]
            ])
            
            st.dataframe(calls_df, use_container_width=True, hide_index=True)
            
            # –í—ã–±–æ—Ä –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            selected_call_file = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∑–≤–æ–Ω–æ–∫ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
                [c["file"] for c in st.session_state["uploaded_calls"]]
            )
            
            selected_call = [c for c in st.session_state["uploaded_calls"] if c["file"] == selected_call_file][0]
            
            st.markdown(f"### –î–µ—Ç–∞–ª–∏: {selected_call['file']}")
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric("–û—Ü–µ–Ω–∫–∞", f"{selected_call['quality']}/20")
                st.metric("–í–µ–∂–ª–∏–≤–æ—Å—Ç—å", f"{selected_call['scores']['politeness']}/5")
            
            with col2:
                st.metric("–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å", selected_call["sentiment"])
                st.metric("–ü–æ–Ω–∏–º–∞–Ω–∏–µ", f"{selected_call['scores']['understanding']}/5")
            
            with col3:
                st.metric("–ú–µ–Ω–µ–¥–∂–µ—Ä", selected_call["manager"])
                st.metric("–î–∞—Ç–∞", selected_call["date"])
            
            st.markdown("#### –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è:")
            st.text_area("", selected_call["transcription"], height=100, disabled=True, key=f"trans_{selected_call['id']}")
    
    with tabs[2]:
        st.markdown("## üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–≤–æ–Ω–∫–∞–º")
        
        if st.session_state["uploaded_calls"]:
            # –°—Ä–µ–¥–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏
            avg_quality = np.mean([c["quality"] for c in st.session_state["uploaded_calls"]])
            
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞", f"{avg_quality:.1f}/20")
            
            positive_count = sum(1 for c in st.session_state["uploaded_calls"] if c["sentiment"] == "positive")
            with col2:
                st.metric("–ü–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤", f"{positive_count}/{len(st.session_state['uploaded_calls'])}")
            
            with col3:
                st.metric("–í—Å–µ–≥–æ –∑–≤–æ–Ω–∫–æ–≤", len(st.session_state["uploaded_calls"]))
            
            # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–æ–∫
            if px:
                quality_data = pd.DataFrame([
                    {"–û—Ü–µ–Ω–∫–∞": c["quality"], "–ú–µ–Ω–µ–¥–∂–µ—Ä": c["manager"]}
                    for c in st.session_state["uploaded_calls"]
                ])
                
                fig = px.bar(quality_data, x="–ú–µ–Ω–µ–¥–∂–µ—Ä", y="–û—Ü–µ–Ω–∫–∞", title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º")
                fig.update_layout(height=400)
                st.plotly_chart(fig, use_container_width=True)

def show_pulse_module():
    """–ú–æ–¥—É–ª—å '–ü—É–ª—å—Å —Å–¥–µ–ª–æ–∫'"""
    st.markdown("# ‚õµ –ü—É–ª—å—Å —Å–¥–µ–ª–æ–∫")
    
    st.markdown("## –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è —Å–¥–µ–ª–æ–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
    
    for deal in DEALS_DATA:
        with st.container(border=True):
            col1, col2, col3, col4 = st.columns([2, 1, 1, 1])
            
            with col1:
                st.markdown(f"### {deal['title']}")
                st.markdown(f"**–ú–µ–Ω–µ–¥–∂–µ—Ä:** {deal['manager']} | **–°—É–º–º–∞:** {deal['amount']:,} ‚ÇΩ".replace(",", " "))
            
            with col2:
                st.markdown(f"**–°—Ç–∞–¥–∏—è:** {deal['stage']}")
                st.markdown(f"**–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å:** {deal['probability']}%")
            
            with col3:
                # –¶–≤–µ—Ç–Ω–æ–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–¥–æ—Ä–æ–≤—å—è
                if deal['probability'] > 70:
                    st.success(f"–ó–¥–æ—Ä–æ–≤—å–µ: {deal['days_in_stage']}+ –¥–Ω–µ–π")
                elif deal['probability'] > 40:
                    st.warning(f"–ó–¥–æ—Ä–æ–≤—å–µ: {deal['days_in_stage']} –¥–Ω–µ–π")
                else:
                    st.error(f"–ó–¥–æ—Ä–æ–≤—å–µ: {deal['days_in_stage']} –¥–Ω–µ–π")
            
            with col4:
                st.metric("üí∞ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª", f"{int(deal['amount'] * deal['probability']/100):,} ‚ÇΩ".replace(",", " "))
            
            # –î–µ—Ç–∞–ª–∏
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("**‚úÖ –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã:**")
                for factor in deal["health_pos"]:
                    st.markdown(f"- ‚úì {factor}")
            
            with col2:
                st.markdown("**‚ö†Ô∏è –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã:**")
                for factor in deal["health_neg"]:
                    st.markdown(f"- ‚úó {factor}")

def show_assistant_module():
    """–ú–æ–¥—É–ª—å 'AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç'"""
    st.markdown("# ü§ñ AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç")
    
    st.markdown("–ü–æ–º–æ–≥—É —Ä–µ—à–∏—Ç—å –≤–∞—à—É –∑–∞–¥–∞—á—É –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –æ—Ç–¥–µ–ª–æ–º –ø—Ä–æ–¥–∞–∂")
    
    # Chat history
    for message in st.session_state["chat_history"]:
        if message["role"] == "user":
            with st.chat_message("user"):
                st.markdown(message["content"])
        else:
            with st.chat_message("assistant"):
                st.markdown(message["content"])
    
    # Input
    user_input = st.chat_input("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∑–∞–¥–∞—á—É...")
    
    if user_input:
        st.session_state["chat_history"].append({
            "role": "user",
            "content": user_input
        })
        
        # AI Response
        with st.chat_message("assistant"):
            with st.spinner("‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞..."):
                time.sleep(1)
                
                response = generate_ai_response(user_input)
                st.markdown(response)
        
        st.session_state["chat_history"].append({
            "role": "assistant",
            "content": response
        })
        
        st.rerun()

def generate_ai_response(user_input: str) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
    user_input_lower = user_input.lower()
    
    if "–∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ" in user_input_lower or "–∫–ø" in user_input_lower or "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ" in user_input_lower:
        return """–í–æ—Ç —à–∞–±–ª–æ–Ω –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:

**–ö–û–ú–ú–ï–†–ß–ï–°–ö–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï**

–ö–æ–º–ø–∞–Ω–∏—è: –†–£–ë–ò–ß–ê–¢
–î–∞—Ç–∞: 31 –æ–∫—Ç—è–±—Ä—è 2025

**–£—Å–ª—É–≥–∞:** AI-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª–æ–º –ø—Ä–æ–¥–∞–∂

**–°—Ç–æ–∏–º–æ—Å—Ç—å:**
- –û—Ç 50,000‚ÇΩ/–º–µ—Å –∑–∞ 3 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- +7,500‚ÇΩ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ

**–í–∫–ª—é—á–µ–Ω–æ:**
‚úì –ê—É–¥–∏—Ç –≤–æ—Ä–æ–Ω–∫–∏
‚úì –û—Ü–µ–Ω–∫–∞ –∑–≤–æ–Ω–∫–æ–≤  
‚úì –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –û–ü
‚úì AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç
‚úì –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CRM

**–£—Å–ª–æ–≤–∏—è:** –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∑–∞ 1 –¥–µ–Ω—å. –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7.

–†–µ–∫–æ–º–µ–Ω–¥—É—é –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –≤—ã—è–≤–ª–µ–Ω–∏—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π –∫–ª–∏–µ–Ω—Ç–∞."""
    
    elif "–ø–∏—Å—å–º–æ" in user_input_lower or "email" in user_input_lower:
        return """–í–æ—Ç —à–∞–±–ª–æ–Ω –ø–∏—Å—å–º–∞:

–ü—Ä–µ–¥–º–µ—Ç: –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª–æ–º –ø—Ä–æ–¥–∞–∂

–î–æ–±—Ä—ã–π –¥–µ–Ω—å!

–Ø —Ö–æ—Ç–µ–ª –±—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å –≤–∞–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –†–£–ë–ò–ß–ê–¢ - —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª–æ–º –ø—Ä–æ–¥–∞–∂.

**–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:**
- –≠–∫–æ–Ω–æ–º–∏—è 80% –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Ä—É—á–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ CRM
- –°–Ω–∏–∂–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä–∏ —Å–¥–µ–ª–æ–∫ –Ω–∞ 40%
- –†–æ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –Ω–∞ 20%
- –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –∑–∞ 2 –Ω–µ–¥–µ–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞ –º–µ—Å—è—Ü–∞

**–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚úì –ê—É–¥–∏—Ç –≤–æ—Ä–æ–Ω–∫–∏ –∏ –≤—ã—è–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º
‚úì –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∑–≤–æ–Ω–∫–æ–≤ —Å AI
‚úì –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ç–¥–µ–ª–∞
‚úì AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π

–ë—É–¥—É —Ä–∞–¥ –æ–±—Å—É–¥–∏—Ç—å –≤–∞—à–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏. –ì–æ—Ç–æ–≤ –ø—Ä–æ–≤–µ—Å—Ç–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–í–∞—à–µ –∏–º—è"""
    
    elif "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è" in user_input_lower or "—Å–æ–≤–µ—Ç" in user_input_lower:
        return """**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –æ—Ç–¥–µ–ª–æ–º –ø—Ä–æ–¥–∞–∂:**

1. **–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫** - –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ –ø–ª–∞–Ω/—Ñ–∞–∫—Ç –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
2. **–ê—É–¥–∏—Ç –∑–∞—Å—Ç—Ä—è–≤—à–∏—Ö —Å–¥–µ–ª–æ–∫** - –≤—ã—è–≤–ª—è–π—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã –∑–∞ 5 –º–∏–Ω—É—Ç –≤–º–µ—Å—Ç–æ —á–∞—Å–æ–≤
3. **–û—Ü–µ–Ω–∫–∞ –∑–≤–æ–Ω–∫–æ–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤** - —É–ª—É—á—à–∞–π—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—â–µ–Ω–∏—è –Ω–∞ 20%
4. **–ü—É–ª—å—Å —Å–¥–µ–ª–æ–∫** - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –∑–¥–æ—Ä–æ–≤—å–µ –∫–∞–∂–¥–æ–π —Å–¥–µ–ª–∫–∏
5. **–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ 1-1 –≤—Å—Ç—Ä–µ—á–∏** - –¥–∞–≤–∞–π—Ç–µ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –∏ —Å—Ç–∞–≤—å—Ç–µ —Ü–µ–ª–∏

**–û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:**
- –†–æ—Å—Ç –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –Ω–∞ 19%
- –°–Ω–∏–∂–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –Ω–∞ 30%
- –†–æ—Å—Ç –ø—Ä–∏–±—ã–ª–∏ –Ω–∞ 40% –∑–∞ –≥–æ–¥"""
    
    elif "–∑–≤–æ–Ω–∫" in user_input_lower or "–∑–≤–æ–Ω" in user_input_lower:
        return """**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –∑–≤–æ–Ω–∫–æ–≤:**

1. **–ù–∞—á–∞–ª–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞** - –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å, —Å–ø—Ä–æ—Å–∏—Ç–µ –æ –¥–µ–ª–∞—Ö
2. **–í—ã—è–≤–ª–µ–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏** - —Å–ª—É—à–∞–π—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ, –∑–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã
3. **–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è —Ä–µ—à–µ–Ω–∏—è** - –ø–æ–¥–≤—è–∂–∏—Ç–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∫ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è–º
4. **–†–∞–±–æ—Ç–∞ —Å –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è–º–∏** - —Å–ª—É—à–∞–π—Ç–µ, –ø–æ–Ω–∏–º–∞–π—Ç–µ, –æ—Ç–≤–µ—á–∞–π—Ç–µ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ
5. **–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–¥–µ–ª–∫–∏** - –ø—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–∑–æ–≤–∏—Ç–µ —Å—Ä–æ–∫–∏

**–ö–ü–î –ø–æ–≤—ã—à–∞–µ—Ç—Å—è –Ω–∞ 20% –ø—Ä–∏ —Å–æ–±–ª—é–¥–µ–Ω–∏–∏ —ç—Ç–∏—Ö –ø—Ä–∞–≤–∏–ª!**"""
    
    else:
        return """–Ø –≤–∞—à AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –†–£–ë–ò–ß–ê–¢. –ú–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å —Å:

‚úì –ì–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –ø–∏—Å–µ–º –∏ –ö–ü
‚úì –ê–Ω–∞–ª–∏–∑–æ–º —Å–¥–µ–ª–æ–∫ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
‚úì –°–æ–≤–µ—Ç–∞–º–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Ä–∞–±–æ—Ç—ã –∫–æ–º–∞–Ω–¥—ã
‚úì –†–∞—Å—á–µ—Ç–æ–º –º–µ—Ç—Ä–∏–∫ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
‚úì –û—Ç–≤–µ—Ç–∞–º–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ–¥–∞–∂–∞–º–∏

–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? –ó–∞–¥–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É."""

if __name__ == "__main__":
    main()
