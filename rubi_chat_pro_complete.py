# -*- coding: utf-8 -*-
"""
RUBI CHAT PRO v4.0 - –ü–û–õ–ù–û–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–ï
–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–æ–≥ RUBI Chat —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–µ–π –∑–≤–æ–Ω–∫–æ–≤ –∏ –∞–Ω–∞–ª–∏–∑–æ–º –∫–∞—á–µ—Å—Ç–≤–∞
–í—Å–µ 5 –º–æ–¥—É–ª–µ–π + –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Bitrix24
"""

import os
import json
import time
from datetime import datetime, timedelta
from io import BytesIO
import requests

import numpy as np
import pandas as pd
import streamlit as st
from openai import OpenAI
import plotly.express as px
import plotly.graph_objects as go

# =====================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
# =====================
try:
    OPENAI_API_KEY = st.secrets["OPENAI_API_KEY"]
except (KeyError, FileNotFoundError):
    OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")

try:
    BITRIX24_WEBHOOK = st.secrets["BITRIX24_WEBHOOK"]
except (KeyError, FileNotFoundError):
    BITRIX24_WEBHOOK = os.getenv("BITRIX24_WEBHOOK", "")

if not OPENAI_API_KEY:
    st.error("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    st.stop()

client = OpenAI(api_key=OPENAI_API_KEY)

st.set_page_config(
    page_title="RUBI CHAT PRO v4.0",
    page_icon="üî•",
    layout="wide",
    initial_sidebar_state="expanded"
)

# =====================
# MOCK –î–ê–ù–ù–´–ï
# =====================
MANAGERS = [
    {"id": 1, "name": "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤", "kpi": 95, "target": 100, "calls": 45, "deals": 12},
    {"id": 2, "name": "–ò—Ä–∏–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞", "kpi": 65, "target": 100, "calls": 32, "deals": 8},
    {"id": 3, "name": "–ê—Ä—Ç–µ–º –°–º–∏—Ä–Ω–æ–≤", "kpi": 78, "target": 100, "calls": 38, "deals": 10},
    {"id": 4, "name": "–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞", "kpi": 45, "target": 100, "calls": 20, "deals": 5},
]

DEALS = [
    {"id": 1, "title": "–û–û–û –°—Ç—Ä–æ–π-–°–µ—Ä–≤–∏—Å", "manager": "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤", "amount": 500000, "stage": "–ü–µ—Ä–µ–≥–æ–≤–æ—Ä—ã", "probability": 85, "next_action": "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ö–ü"},
    {"id": 2, "title": "–ó–ê–û –ü—Ä–æ–º—Ç–æ—Ä–≥", "manager": "–ò—Ä–∏–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞", "amount": 250000, "stage": "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", "probability": 60, "next_action": "–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è"},
    {"id": 3, "title": "–û–û–û –õ–æ–≥–∏—Å—Ç–∏–∫–∞", "manager": "–ê—Ä—Ç–µ–º –°–º–∏—Ä–Ω–æ–≤", "amount": 750000, "stage": "–ü–µ—Ä–µ–≥–æ–≤–æ—Ä—ã", "probability": 45, "next_action": "–í—Å—Ç—Ä–µ—á–∞"},
    {"id": 4, "title": "–û–û–û –ê–ª—å—Ñ–∞", "manager": "–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞", "amount": 100000, "stage": "–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è", "probability": 30, "next_action": "–£—Ç–æ—á–Ω–∏—Ç—å –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å"},
]

# =====================
# –§–£–ù–ö–¶–ò–ò BITRIX24
# =====================

def get_calls_from_bitrix() -> list:
    """–ü–æ–ª—É—á–∏—Ç—å –∑–≤–æ–Ω–∫–∏ –∏–∑ Bitrix24"""
    if not BITRIX24_WEBHOOK:
        return []
    
    try:
        url = f"{BITRIX24_WEBHOOK}crm.activity.list.json"
        params = {
            "filter[SUBJECT]": "–ó–≤–æ–Ω–æ–∫",
            "filter[TYPE_ID]": "1",
            "limit": 50
        }
        
        response = requests.get(url, params=params, timeout=10)
        if response.status_code == 200:
            return response.json().get("result", [])
        return []
    except:
        return []

def get_deal_info(deal_id: str) -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–¥–µ–ª–∫–µ"""
    if not BITRIX24_WEBHOOK:
        return {}
    
    try:
        url = f"{BITRIX24_WEBHOOK}crm.deal.get.json"
        response = requests.get(url, params={"id": deal_id}, timeout=10)
        if response.status_code == 200:
            return response.json().get("result", {})
        return {}
    except:
        return {}

def save_analysis_to_bitrix(deal_id: str, analysis: dict):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –≤ Bitrix24"""
    if not BITRIX24_WEBHOOK:
        return False
    
    try:
        note_text = f"""üìä –ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê –ó–í–û–ù–ö–ê - RUBI CHAT PRO v4.0

‚≠ê –û—Ü–µ–Ω–∫–∞: {analysis.get('total_score', 0)}/20

–ö—Ä–∏—Ç–µ—Ä–∏–∏:
üé§ –í–µ–∂–ª–∏–≤–æ—Å—Ç—å: {analysis.get('scores', {}).get('politeness', 0)}/5
üëÇ –í—ã—è–≤–ª–µ–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π: {analysis.get('scores', {}).get('understanding', 0)}/5
üíº –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è: {analysis.get('scores', {}).get('solution', 0)}/5
‚úçÔ∏è –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–¥–µ–ª–∫–∏: {analysis.get('scores', {}).get('closing', 0)}/5

üòä –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {analysis.get('sentiment', 'N/A')}

üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
{chr(10).join(f"‚Ä¢ {rec}" for rec in analysis.get('recommendations', []))}"""
        
        url = f"{BITRIX24_WEBHOOK}crm.activity.add.json"
        data = {
            "fields": {
                "OWNER_ID": deal_id,
                "OWNER_TYPE_ID": "2",
                "TYPE_ID": "4",
                "DESCRIPTION": note_text,
                "SUBJECT": "ü§ñ –ê–ù–ê–õ–ò–ó –ó–í–û–ù–ö–ê"
            }
        }
        
        response = requests.post(url, json=data, timeout=10)
        return response.status_code == 200
    except:
        return False

# =====================
# –§–£–ù–ö–¶–ò–ò –ê–ù–ê–õ–ò–ó–ê
# =====================

def transcribe_audio(audio_data: bytes) -> str:
    """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è —á–µ—Ä–µ–∑ Whisper"""
    try:
        audio_file = BytesIO(audio_data)
        audio_file.name = "call.mp3"
        
        st.info("üéôÔ∏è –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∑–≤–æ–Ω–æ–∫...")
        
        transcript = client.audio.transcriptions.create(
            model="whisper-1",
            file=audio_file,
            language="ru"
        )
        
        st.success("‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        return transcript.text
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return ""

def analyze_call(transcription: str) -> dict:
    """–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∑–≤–æ–Ω–∫–∞"""
    try:
        st.info("ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∑–≤–æ–Ω–∫–∞...")
        
        prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –∑–≤–æ–Ω–æ–∫:

{transcription}

–î–∞–π –æ—Ü–µ–Ω–∫—É (0-5 –∫–∞–∂–¥—ã–π):
1. –í–µ–∂–ª–∏–≤–æ—Å—Ç—å
2. –í—ã—è–≤–ª–µ–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π
3. –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è
4. –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–¥–µ–ª–∫–∏

–û–ø—Ä–µ–¥–µ–ª–∏:
- –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å (–ü–æ–∑–∏—Ç–∏–≤–Ω–∞—è/–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è/–ù–µ–≥–∞—Ç–∏–≤–Ω–∞—è)
- –ö–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã (3-5)
- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (2-3)

–û—Ç–≤–µ—Ç JSON:
{{
    "politeness": 0-5,
    "understanding": 0-5,
    "solution": 0-5,
    "closing": 0-5,
    "sentiment": "...",
    "key_phrases": [...],
    "recommendations": [...]
}}"""
        
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7,
            max_tokens=1000
        )
        
        response_text = response.choices[0].message.content
        start_idx = response_text.find('{')
        end_idx = response_text.rfind('}') + 1
        
        analysis = json.loads(response_text[start_idx:end_idx])
        
        total = sum([
            analysis.get("politeness", 0),
            analysis.get("understanding", 0),
            analysis.get("solution", 0),
            analysis.get("closing", 0)
        ])
        
        analysis["total_score"] = total
        analysis["scores"] = {
            "politeness": analysis.get("politeness", 0),
            "understanding": analysis.get("understanding", 0),
            "solution": analysis.get("solution", 0),
            "closing": analysis.get("closing", 0)
        }
        
        st.success("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        return analysis
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return {}

# =====================
# –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø
# =====================

def require_auth():
    if "auth" not in st.session_state:
        st.session_state.auth = False
    
    if st.session_state.auth:
        return True
    
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        st.markdown("### üîê RUBI CHAT PRO v4.0")
        
        with st.form("login"):
            login = st.text_input("–õ–æ–≥–∏–Ω", "admin")
            password = st.text_input("–ü–∞—Ä–æ–ª—å", "admin", type="password")
            
            if st.form_submit_button("–í–æ–π—Ç–∏", use_container_width=True):
                if login == "admin" and password == "admin":
                    st.session_state.auth = True
                    st.rerun()
                else:
                    st.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å")
    
    return False

# =====================
# –ú–û–î–£–õ–ò –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
# =====================

def module_call_analysis():
    """–ú–æ–¥—É–ª—å 1: –û—Ü–µ–Ω–∫–∞ –∑–≤–æ–Ω–∫–æ–≤"""
    st.markdown("# üéôÔ∏è –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∑–≤–æ–Ω–∫–æ–≤")
    
    col1, col2 = st.columns([2, 1])
    with col1:
        st.markdown("### –ó–∞–≥—Ä—É–∑–∏—Ç—å –∞—É–¥–∏–æ–∑–∞–ø–∏—Å—å")
    with col2:
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", use_container_width=True):
            st.success("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ")
    
    st.markdown("---")
    
    # –í–∫–ª–∞–¥–∫–∞ 1: –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑
    tab1, tab2, tab3 = st.tabs(["üì• –ó–∞–≥—Ä—É–∑–∫–∞", "üìä –ò—Å—Ç–æ—Ä–∏—è", "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"])
    
    with tab1:
        col1, col2 = st.columns([2, 1])
        with col1:
            uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª", type=["mp3", "wav", "ogg", "m4a"])
        with col2:
            manager = st.selectbox("–ú–µ–Ω–µ–¥–∂–µ—Ä:", [m["name"] for m in MANAGERS])
        
        if uploaded_file:
            st.success(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω: {uploaded_file.name}")
            
            col1, col2 = st.columns(2)
            with col1:
                client_name = st.text_input("–ö–æ–º–ø–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞:", "–û–û–û –ö–ª–∏–µ–Ω—Ç")
            with col2:
                deal_id = st.text_input("ID —Å–¥–µ–ª–∫–∏ Bitrix24:", "123")
            
            if st.button("üöÄ –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑", use_container_width=True, type="primary"):
                audio_data = uploaded_file.read()
                
                # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è
                st.markdown("### üìù –≠—Ç–∞–ø 1: –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è")
                transcription = transcribe_audio(audio_data)
                
                if transcription:
                    st.text_area("–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è:", transcription, height=100, disabled=True)
                    
                    # –ê–Ω–∞–ª–∏–∑
                    st.markdown("### üéØ –≠—Ç–∞–ø 2: –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞")
                    analysis = analyze_call(transcription)
                    
                    if analysis:
                        # –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                        col1, col2, col3, col4 = st.columns(4)
                        with col1:
                            st.metric("üé§ –í–µ–∂–ª–∏–≤–æ—Å—Ç—å", f"{analysis.get('scores', {}).get('politeness', 0)}/5")
                        with col2:
                            st.metric("üëÇ –ü–æ–Ω–∏–º–∞–Ω–∏–µ", f"{analysis.get('scores', {}).get('understanding', 0)}/5")
                        with col3:
                            st.metric("üíº –†–µ—à–µ–Ω–∏–µ", f"{analysis.get('scores', {}).get('solution', 0)}/5")
                        with col4:
                            st.metric("‚úçÔ∏è –ó–∞–∫—Ä—ã—Ç–∏–µ", f"{analysis.get('scores', {}).get('closing', 0)}/5")
                        
                        st.markdown("---")
                        
                        total = analysis.get("total_score", 0)
                        if total >= 18:
                            st.success(f"üü¢ –û—Ü–µ–Ω–∫–∞: {total}/20 (–û—Ç–ª–∏—á–Ω—ã–π –∑–≤–æ–Ω–æ–∫)")
                        elif total >= 14:
                            st.warning(f"üü° –û—Ü–µ–Ω–∫–∞: {total}/20 (–•–æ—Ä–æ—à–∏–π –∑–≤–æ–Ω–æ–∫)")
                        else:
                            st.error(f"üî¥ –û—Ü–µ–Ω–∫–∞: {total}/20 (–¢—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è)")
                        
                        st.markdown("---")
                        
                        # –î–µ—Ç–∞–ª–∏
                        col1, col2 = st.columns(2)
                        with col1:
                            st.markdown("#### üòä –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:")
                            st.write(analysis.get("sentiment", "N/A"))
                        with col2:
                            st.markdown("#### üîë –ö–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã:")
                            for phrase in analysis.get("key_phrases", [])[:3]:
                                st.write(f"‚Ä¢ {phrase}")
                        
                        st.markdown("#### üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
                        for rec in analysis.get("recommendations", []):
                            st.write(f"‚Ä¢ {rec}")
                        
                        st.markdown("---")
                        
                        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ Bitrix24", use_container_width=True):
                            success = save_analysis_to_bitrix(deal_id, analysis)
                            if success:
                                st.success("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ Bitrix24!")
                            else:
                                st.info("‚ÑπÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ—Ç–æ–≤—ã")
    
    with tab2:
        st.markdown("### üìä –ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤")
        st.info("–ò—Å—Ç–æ—Ä–∏—è –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
    
    with tab3:
        st.markdown("### üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–≤–æ–Ω–∫–∞–º")
        st.info("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")

def module_sales_results():
    """–ú–æ–¥—É–ª—å 2: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–¥–∞–∂"""
    st.markdown("# üöÄ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–¥–µ–ª–∞ –ø—Ä–æ–¥–∞–∂")
    
    st.markdown("---")
    
    # KPI –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    st.markdown("## üìä KPI –ú–ï–ù–ï–î–ñ–ï–†–û–í")
    
    kpi_data = []
    for m in MANAGERS:
        kpi_data.append({
            "üë§ –ú–µ–Ω–µ–¥–∂–µ—Ä": m["name"],
            "üìû –ó–≤–æ–Ω–∫–æ–≤": m["calls"],
            "ü§ù –°–¥–µ–ª–æ–∫": m["deals"],
            "üìà KPI": f"{m['kpi']}%",
            "üéØ –ü–ª–∞–Ω": f"{m['target']}%"
        })
    
    df_kpi = pd.DataFrame(kpi_data)
    st.dataframe(df_kpi, use_container_width=True, hide_index=True)
    
    st.markdown("---")
    
    # –ì—Ä–∞—Ñ–∏–∫–∏
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("## üìà –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞")
        names = [m["name"] for m in MANAGERS]
        kpi_values = [m["kpi"] for m in MANAGERS]
        
        fig = px.bar(
            x=names,
            y=kpi_values,
            labels={"x": "–ú–µ–Ω–µ–¥–∂–µ—Ä", "y": "KPI %"},
            title="KPI –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º"
        )
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        st.markdown("## üìû –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–æ–Ω–∫–æ–≤")
        calls = [m["calls"] for m in MANAGERS]
        
        fig = px.bar(
            x=names,
            y=calls,
            labels={"x": "–ú–µ–Ω–µ–¥–∂–µ—Ä", "y": "–ó–≤–æ–Ω–∫–∏"},
            title="–ó–≤–æ–Ω–∫–∏ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º"
        )
        st.plotly_chart(fig, use_container_width=True)

def module_deal_audit():
    """–ú–æ–¥—É–ª—å 3: –ê—É–¥–∏—Ç –≤–æ—Ä–æ–Ω–∫–∏"""
    st.markdown("# üîç –ê—É–¥–∏—Ç –≤–æ—Ä–æ–Ω–∫–∏ —Å–¥–µ–ª–æ–∫")
    
    st.markdown("---")
    
    # –¢–∞–±–ª–∏—Ü–∞ —Å–¥–µ–ª–æ–∫
    st.markdown("## üìã –°–¥–µ–ª–∫–∏")
    
    deals_data = []
    for d in DEALS:
        deals_data.append({
            "ID": d["id"],
            "üìå –°–¥–µ–ª–∫–∞": d["title"],
            "üë§ –ú–µ–Ω–µ–¥–∂–µ—Ä": d["manager"],
            "üí∞ –°—É–º–º–∞": f"{d['amount']:,}‚ÇΩ".replace(",", " "),
            "üìä –°—Ç–∞–¥–∏—è": d["stage"],
            "üìà –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å": f"{d['probability']}%",
            "üéØ –°–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ": d["next_action"]
        })
    
    df_deals = pd.DataFrame(deals_data)
    st.dataframe(df_deals, use_container_width=True, hide_index=True)
    
    st.markdown("---")
    
    # –§–∏–ª—å—Ç—Ä—ã
    col1, col2, col3 = st.columns(3)
    with col1:
        filter_manager = st.selectbox("–ú–µ–Ω–µ–¥–∂–µ—Ä:", ["–í—Å–µ"] + [m["name"] for m in MANAGERS])
    with col2:
        filter_stage = st.selectbox("–°—Ç–∞–¥–∏—è:", ["–í—Å–µ", "–ü–µ—Ä–µ–≥–æ–≤–æ—Ä—ã", "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", "–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è"])
    with col3:
        filter_probability = st.selectbox("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å:", ["–í—Å–µ", "> 80%", "60-80%", "< 60%"])
    
    # –ì—Ä–∞—Ñ–∏–∫ –≤–æ—Ä–æ–Ω–∫–∏
    st.markdown("## üìä –í–æ—Ä–æ–Ω–∫–∞ –ø—Ä–æ–¥–∞–∂")
    
    stages = ["–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è", "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", "–ü–µ—Ä–µ–≥–æ–≤–æ—Ä—ã", "–ó–∞–∫—Ä—ã—Ç–æ –≤—ã–∏–≥—Ä–∞–Ω–æ"]
    counts = [2, 4, 6, 1]
    
    fig = px.funnel(
        x=counts,
        y=stages,
        title="–í–æ—Ä–æ–Ω–∫–∞ –ø—Ä–æ–¥–∞–∂"
    )
    st.plotly_chart(fig, use_container_width=True)

def module_deals_pulse():
    """–ú–æ–¥—É–ª—å 4: –ü—É–ª—å—Å —Å–¥–µ–ª–æ–∫"""
    st.markdown("# ‚õµ –ü—É–ª—å—Å —Å–¥–µ–ª–æ–∫")
    
    st.markdown("---")
    
    for deal in DEALS:
        with st.container(border=True):
            col1, col2, col3 = st.columns([2, 1, 1])
            
            with col1:
                st.markdown(f"### üíº {deal['title']}")
                st.markdown(f"**–ú–µ–Ω–µ–¥–∂–µ—Ä:** {deal['manager']} | **–°—É–º–º–∞:** {deal['amount']:,}‚ÇΩ".replace(",", " "))
            
            with col2:
                st.markdown(f"**–°—Ç–∞–¥–∏—è:** {deal['stage']}")
                st.markdown(f"**–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å:** {deal['probability']}%")
            
            with col3:
                if deal['probability'] > 70:
                    st.success("‚úÖ –ó–¥–æ—Ä–æ–≤–∞—è —Å–¥–µ–ª–∫–∞")
                elif deal['probability'] > 40:
                    st.warning("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è")
                else:
                    st.error("üî¥ –ö—Ä–∏—Ç–∏—á–Ω–∞—è")
            
            st.markdown(f"üìå **–°–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:** {deal['next_action']}")

def module_ai_assistant():
    """–ú–æ–¥—É–ª—å 5: AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç"""
    st.markdown("# ü§ñ AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç")
    
    if "chat_history" not in st.session_state:
        st.session_state.chat_history = []
    
    # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    for message in st.session_state.chat_history:
        if message["role"] == "user":
            with st.chat_message("user"):
                st.markdown(message["content"])
        else:
            with st.chat_message("assistant"):
                st.markdown(message["content"])
    
    # –í–≤–æ–¥
    user_input = st.chat_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å...")
    
    if user_input:
        st.session_state.chat_history.append({"role": "user", "content": user_input})
        
        with st.chat_message("assistant"):
            with st.spinner("‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞..."):
                try:
                    response = client.chat.completions.create(
                        model="gpt-4",
                        messages=[{"role": "user", "content": user_input}],
                        temperature=0.7,
                        max_tokens=1000
                    )
                    
                    response_text = response.choices[0].message.content
                    st.markdown(response_text)
                    
                    st.session_state.chat_history.append({"role": "assistant", "content": response_text})
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# =====================
# –ì–õ–ê–í–ù–û–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–ï
# =====================

def main():
    if not require_auth():
        st.stop()
    
    # –ë–æ–∫–æ–≤–æ–µ –º–µ–Ω—é
    with st.sidebar:
        st.markdown("## üî• RUBI CHAT PRO v4.0")
        st.markdown("**–ü–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª**")
        st.markdown("---")
        
        # –°—Ç–∞—Ç—É—Å
        st.markdown("### ‚úÖ –°—Ç–∞—Ç—É—Å")
        col1, col2 = st.columns([1, 2])
        with col1:
            st.markdown("üîë OpenAI:")
        with col2:
            st.success("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω") if OPENAI_API_KEY else st.error("‚ùå –ù–µ—Ç")
        
        col1, col2 = st.columns([1, 2])
        with col1:
            st.markdown("üìä Bitrix24:")
        with col2:
            st.success("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω") if BITRIX24_WEBHOOK else st.warning("‚ö†Ô∏è –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ")
        
        st.markdown("---")
        
        # –ú–µ–Ω—é –º–æ–¥—É–ª–µ–π
        st.markdown("### üìå –ú–û–î–£–õ–ò")
        
        module = st.radio(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å:",
            [1, 2, 3, 4, 5],
            format_func=lambda x: {
                1: "üéôÔ∏è –û—Ü–µ–Ω–∫–∞ –∑–≤–æ–Ω–∫–æ–≤",
                2: "üöÄ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–¥–∞–∂",
                3: "üîç –ê—É–¥–∏—Ç –≤–æ—Ä–æ–Ω–∫–∏",
                4: "‚õµ –ü—É–ª—å—Å —Å–¥–µ–ª–æ–∫",
                5: "ü§ñ AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç"
            }[x],
            key="module"
        )
        
        st.markdown("---")
        
        if st.button("üö™ –í—ã—Ö–æ–¥", use_container_width=True):
            st.session_state.auth = False
            st.rerun()
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–æ–¥—É–ª—è
    if module == 1:
        module_call_analysis()
    elif module == 2:
        module_sales_results()
    elif module == 3:
        module_deal_audit()
    elif module == 4:
        module_deals_pulse()
    elif module == 5:
        module_ai_assistant()

if __name__ == "__main__":
    main()
